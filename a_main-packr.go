// Code generated by github.com/gobuffalo/packr. DO NOT EDIT.

package main

import "github.com/gobuffalo/packr"

// You can use the "packr clean" command to clean up this,
// and any other packr generated files.
func init() {
		packr.PackJSONBytes("builtin", "fast/collection.tpl", "\"Ly8gR2VuZXJhdGVkIGZyb20ge3suVGVtcGxhdGVGaWxlfX0gd2l0aCBUeXBlPXt7LlR5cGV9fQovLyBvcHRpb25zOiBDb21wYXJhYmxlOnt7LkNvbXBhcmFibGV9fSBOdW1lcmljOnt7Lk51bWVyaWN9fSBPcmRlcmVkOnt7Lk9yZGVyZWR9fSBTdHJpbmdlcjp7ey5TdHJpbmdlcn19IE11dGFibGU6YWx3YXlzCi8vIGJ5IHJ1bnRlbXBsYXRlIHt7LkFwcFZlcnNpb259fQovLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2pvaGFuYnJhbmRob3JzdC9ydW50ZW1wbGF0ZS9ibG9iL21hc3Rlci9CVUlMVElOLm1kCgpwYWNrYWdlIHt7LlBhY2thZ2V9fQoKe3tpZiAuSGFzSW1wb3J0fX0KaW1wb3J0ICgKCXt7LkltcG9ydH19CikKCnt7ZW5kIC19fQovLyB7ey5QcmVmaXguVX19e3suVHlwZS5VfX1TaXplciBkZWZpbmVzIGFuIGludGVyZmFjZSBmb3Igc2l6aW5nIG1ldGhvZHMgb24ge3suVHlwZX19IGNvbGxlY3Rpb25zLgp0eXBlIHt7LlByZWZpeC5VfX17ey5UeXBlLlV9fVNpemVyIGludGVyZmFjZSB7CgkvLyBJc0VtcHR5IHRlc3RzIHdoZXRoZXIge3suUHJlZml4LlV9fXt7LlR5cGUuVX19Q29sbGVjdGlvbiBpcyBlbXB0eS4KCUlzRW1wdHkoKSBib29sCgoJLy8gTm9uRW1wdHkgdGVzdHMgd2hldGhlciB7ey5QcmVmaXguVX19e3suVHlwZS5VfX1Db2xsZWN0aW9uIGlzIGVtcHR5LgoJTm9uRW1wdHkoKSBib29sCgoJLy8gU2l6ZSByZXR1cm5zIHRoZSBudW1iZXIgb2YgaXRlbXMgaW4gdGhlIGxpc3QgLSBhbiBhbGlhcyBvZiBMZW4oKS4KCVNpemUoKSBpbnQKfQp7ey0gaWYgLlN0cmluZ2VyfX0KCi8vIHt7LlByZWZpeC5VfX17ey5UeXBlLlV9fU1rU3RyaW5nZXIgZGVmaW5lcyBhbiBpbnRlcmZhY2UgZm9yIHN0cmluZ2VyIG1ldGhvZHMgb24ge3suVHlwZX19IGNvbGxlY3Rpb25zLgp0eXBlIHt7LlByZWZpeC5VfX17ey5UeXBlLlV9fU1rU3RyaW5nZXIgaW50ZXJmYWNlIHsKCS8vIFN0cmluZyBpbXBsZW1lbnRzIHRoZSBTdHJpbmdlciBpbnRlcmZhY2UgdG8gcmVuZGVyIHRoZSBsaXN0IGFzIGEgY29tbWEtc2VwYXJhdGVkIHN0cmluZyBlbmNsb3NlZAoJLy8gaW4gc3F1YXJlIGJyYWNrZXRzLgoJU3RyaW5nKCkgc3RyaW5nCgoJLy8gTWtTdHJpbmcgY29uY2F0ZW5hdGVzIHRoZSB2YWx1ZXMgYXMgYSBzdHJpbmcgdXNpbmcgYSBzdXBwbGllZCBzZXBhcmF0b3IuIE5vIGVuY2xvc2luZyBtYXJrcyBhcmUgYWRkZWQuCglNa1N0cmluZyhzZXAgc3RyaW5nKSBzdHJpbmcKCgkvLyBNa1N0cmluZzMgY29uY2F0ZW5hdGVzIHRoZSB2YWx1ZXMgYXMgYSBzdHJpbmcsIHVzaW5nIHRoZSBwcmVmaXgsIHNlcGFyYXRvciBhbmQgc3VmZml4IHN1cHBsaWVkLgoJTWtTdHJpbmczKGJlZm9yZSwgYmV0d2VlbiwgYWZ0ZXIgc3RyaW5nKSBzdHJpbmcKCgkvLyBpbXBsZW1lbnRzIGpzb24uTWFyc2hhbGVyIGludGVyZmFjZSB7CglNYXJzaGFsSlNPTigpIChbXWJ5dGUsIGVycm9yKQoKCS8vIGltcGxlbWVudHMganNvbi5Vbm1hcnNoYWxlciBpbnRlcmZhY2UgewoJVW5tYXJzaGFsSlNPTihiIFtdYnl0ZSkgZXJyb3IKCgkvLyBTdHJpbmdMaXN0IGdldHMgYSBsaXN0IG9mIHN0cmluZ3MgdGhhdCBkZXBpY3RzIGFsbCB0aGUgZWxlbWVudHMuCglTdHJpbmdMaXN0KCkgW11zdHJpbmcKfQp7ey0gZW5kfX0KCi8vIHt7LlByZWZpeC5VfX17ey5UeXBlLlV9fUNvbGxlY3Rpb24gZGVmaW5lcyBhbiBpbnRlcmZhY2UgZm9yIGNvbW1vbiBjb2xsZWN0aW9uIG1ldGhvZHMgb24ge3suVHlwZX19Lgp0eXBlIHt7LlByZWZpeC5VfX17ey5UeXBlLlV9fUNvbGxlY3Rpb24gaW50ZXJmYWNlIHsKCXt7LlByZWZpeC5VfX17ey5UeXBlLlV9fVNpemVyCnt7LSBpZiAuU3RyaW5nZXJ9fQoJe3suUHJlZml4LlV9fXt7LlR5cGUuVX19TWtTdHJpbmdlcgp7ey0gZW5kfX0KCgkvLyBJc1NlcXVlbmNlIHJldHVybnMgdHJ1ZSBmb3IgbGlzdHMgYW5kIHF1ZXVlcy4KCUlzU2VxdWVuY2UoKSBib29sCgoJLy8gSXNTZXQgcmV0dXJucyBmYWxzZSBmb3IgbGlzdHMgYW5kIHF1ZXVlcy4KCUlzU2V0KCkgYm9vbAp7ey0gaWYgLlRvTGlzdH19CgoJLy8gVG9MaXN0IHJldHVybnMgYSBzaGFsbG93IGNvcHkgYXMgYSBsaXN0LgoJVG9MaXN0KCkgKnt7LlByZWZpeC5VfX17ey5UeXBlLlV9fUxpc3QKe3stIGVuZH19Cnt7LSBpZiAuVG9TZXR9fQoKCS8vIFRvU2V0IHJldHVybnMgYSBzaGFsbG93IGNvcHkgYXMgYSBzZXQuCglUb1NldCgpICp7ey5QcmVmaXguVX19e3suVHlwZS5VfX1TZXQKe3stIGVuZH19CgoJLy8gVG9TbGljZSByZXR1cm5zIGEgc2hhbGxvdyBjb3B5IGFzIGEgcGxhaW4gc2xpY2UuCglUb1NsaWNlKCkgW117ey5UeXBlfX0KCgkvLyBUb0ludGVyZmFjZVNsaWNlIHJldHVybnMgYSBzaGFsbG93IGNvcHkgYXMgYSBzbGljZSBvZiBhcmJpdHJhcnkgdHlwZS4KCVRvSW50ZXJmYWNlU2xpY2UoKSBbXWludGVyZmFjZXt9CgoJLy8gRXhpc3RzIHZlcmlmaWVzIHRoYXQgb25lIG9yIG1vcmUgZWxlbWVudHMgb2Yge3suUHJlZml4LlV9fXt7LlR5cGUuVX19Q29sbGVjdGlvbiByZXR1cm4gdHJ1ZSBmb3IgdGhlIHByZWRpY2F0ZSBwLgoJRXhpc3RzKHAgZnVuYyh7ey5UeXBlfX0pIGJvb2wpIGJvb2wKCgkvLyBGb3JhbGwgdmVyaWZpZXMgdGhhdCBhbGwgZWxlbWVudHMgb2Yge3suUHJlZml4LlV9fXt7LlR5cGUuVX19Q29sbGVjdGlvbiByZXR1cm4gdHJ1ZSBmb3IgdGhlIHByZWRpY2F0ZSBwLgoJRm9yYWxsKHAgZnVuYyh7ey5UeXBlfX0pIGJvb2wpIGJvb2wKCgkvLyBGb3JlYWNoIGl0ZXJhdGVzIG92ZXIge3suUHJlZml4LlV9fXt7LlR5cGUuVX19Q29sbGVjdGlvbiBhbmQgZXhlY3V0ZXMgdGhlIGZ1bmN0aW9uIGYgYWdhaW5zdCBlYWNoIGVsZW1lbnQuCglGb3JlYWNoKGYgZnVuYyh7ey5UeXBlfX0pKQoKCS8vIEZpbmQgcmV0dXJucyB0aGUgZmlyc3Qge3suVHlwZX19IHRoYXQgcmV0dXJucyB0cnVlIGZvciB0aGUgcHJlZGljYXRlIHAuCgkvLyBGYWxzZSBpcyByZXR1cm5lZCBpZiBub25lIG1hdGNoLgoJRmluZChwIGZ1bmMoe3suVHlwZX19KSBib29sKSAoe3suVHlwZX19LCBib29sKQp7ey0gcmFuZ2UgLk1hcFRvfX0KCgkvLyBNYXBUb3t7LlV9fSByZXR1cm5zIGEgbmV3IFtde3sufX0gYnkgdHJhbnNmb3JtaW5nIGV2ZXJ5IGVsZW1lbnQgd2l0aCBmdW5jdGlvbiBmLgoJLy8gVGhlIHJlc3VsdGluZyBzbGljZSBpcyB0aGUgc2FtZSBzaXplIGFzIHRoZSBjb2xsZWN0aW9uLiBUaGUgY29sbGVjdGlvbiBpcyBub3QgbW9kaWZpZWQuCglNYXBUb3t7LlV9fShmIGZ1bmMoe3skLlR5cGV9fSkge3sufX0pIFtde3sufX0Ke3stIGVuZH19Cnt7LSByYW5nZSAuTWFwVG99fQoKCS8vIEZsYXRNYXB7ey5VfX0gcmV0dXJucyBhIG5ldyBbXXt7Ln19IGJ5IHRyYW5zZm9ybWluZyBldmVyeSBlbGVtZW50IHdpdGggZnVuY3Rpb24gZgoJLy8gdGhhdCByZXR1cm5zIHplcm8gb3IgbW9yZSBpdGVtcyBpbiBhIHNsaWNlLiBUaGUgcmVzdWx0aW5nIGxpc3QgbWF5IGhhdmUgYSBkaWZmZXJlbnQgc2l6ZSB0byB0aGUKCS8vIGNvbGxlY3Rpb24uIFRoZSBjb2xsZWN0aW9uIGlzIG5vdCBtb2RpZmllZC4KCUZsYXRNYXBUb3t7LlV9fShmIGZ1bmMoe3skLlR5cGV9fSkgW117ey59fSkgW117ey59fQp7ey0gZW5kfX0KCgkvLyBTZW5kIHJldHVybnMgYSBjaGFubmVsIHRoYXQgd2lsbCBzZW5kIGFsbCB0aGUgZWxlbWVudHMgaW4gb3JkZXIuIENhbiBiZSB1c2VkIHdpdGggdGhlIHBsdW1iaW5nIGNvZGUsIGZvciBleGFtcGxlLgoJLy8gQSBnb3JvdXRpbmUgaXMgY3JlYXRlZCB0byBzZW5kIHRoZSBlbGVtZW50czsgdGhpcyBvbmx5IHRlcm1pbmF0ZXMgd2hlbiBhbGwgdGhlIGVsZW1lbnRzIGhhdmUgYmVlbiBjb25zdW1lZAoJU2VuZCgpIDwtY2hhbiB7ey5UeXBlfX0KCgkvLyBDb3VudEJ5IGdpdmVzIHRoZSBudW1iZXIgZWxlbWVudHMgb2Yge3suUHJlZml4LlV9fXt7LlR5cGUuVX19Q29sbGVjdGlvbiB0aGF0IHJldHVybiB0cnVlIGZvciB0aGUgcHJlZGljYXRlIHAuCglDb3VudEJ5KHAgZnVuYyh7ey5UeXBlfX0pIGJvb2wpIGludAp7ey0gaWYgLkNvbXBhcmFibGV9fQoKCS8vIENvbnRhaW5zIGRldGVybWluZXMgd2hldGhlciBhIGdpdmVuIGl0ZW0gaXMgYWxyZWFkeSBpbiB0aGUgY29sbGVjdGlvbiwgcmV0dXJuaW5nIHRydWUgaWYgc28uCglDb250YWlucyh2IHt7LlR5cGV9fSkgYm9vbAoKCS8vIENvbnRhaW5zQWxsIGRldGVybWluZXMgd2hldGhlciB0aGUgZ2l2ZW4gaXRlbXMgYXJlIGFsbCBpbiB0aGUgY29sbGVjdGlvbiwgcmV0dXJuaW5nIHRydWUgaWYgc28uCglDb250YWluc0FsbCh2IC4uLnt7LlR5cGV9fSkgYm9vbAp7ey0gZW5kfX0KCgkvLyBDbGVhciB0aGUgZW50aXJlIGNvbGxlY3Rpb24uCglDbGVhcigpCgoJLy8gQWRkIGFkZHMgaXRlbXMgdG8gdGhlIGN1cnJlbnQgY29sbGVjdGlvbi4KCUFkZChtb3JlIC4uLnt7LlR5cGV9fSkKe3stIGlmIC5PcmRlcmVkfX0KCgkvLyBNaW4gcmV0dXJucyB0aGUgbWluaW11bSB2YWx1ZSBvZiBhbGwgdGhlIGl0ZW1zIGluIHRoZSBjb2xsZWN0aW9uLiBQYW5pY3MgaWYgdGhlcmUgYXJlIG5vIGVsZW1lbnRzLgoJTWluKCkge3suVHlwZS5OYW1lfX0KCgkvLyBNYXggcmV0dXJucyB0aGUgbWluaW11bSB2YWx1ZSBvZiBhbGwgdGhlIGl0ZW1zIGluIHRoZSBjb2xsZWN0aW9uLiBQYW5pY3MgaWYgdGhlcmUgYXJlIG5vIGVsZW1lbnRzLgoJTWF4KCkge3suVHlwZS5OYW1lfX0Ke3stIGVuZH19CgoJLy8gTWluQnkgcmV0dXJucyBhbiBlbGVtZW50IG9mIHt7LlByZWZpeC5VfX17ey5UeXBlLlV9fUNvbGxlY3Rpb24gY29udGFpbmluZyB0aGUgbWluaW11bSB2YWx1ZSwgd2hlbiBjb21wYXJlZCB0byBvdGhlciBlbGVtZW50cwoJLy8gdXNpbmcgYSBwYXNzZWQgZnVuYyBkZWZpbmluZyDigJhsZXNz4oCZLiBJbiB0aGUgY2FzZSBvZiBtdWx0aXBsZSBpdGVtcyBiZWluZyBlcXVhbGx5IG1pbmltYWwsIHRoZSBmaXJzdCBzdWNoCgkvLyBlbGVtZW50IGlzIHJldHVybmVkLiBQYW5pY3MgaWYgdGhlcmUgYXJlIG5vIGVsZW1lbnRzLgoJTWluQnkobGVzcyBmdW5jKHt7LlR5cGV9fSwge3suVHlwZX19KSBib29sKSB7ey5UeXBlfX0KCgkvLyBNYXhCeSByZXR1cm5zIGFuIGVsZW1lbnQgb2Yge3suUHJlZml4LlV9fXt7LlR5cGUuVX19Q29sbGVjdGlvbiBjb250YWluaW5nIHRoZSBtYXhpbXVtIHZhbHVlLCB3aGVuIGNvbXBhcmVkIHRvIG90aGVyIGVsZW1lbnRzCgkvLyB1c2luZyBhIHBhc3NlZCBmdW5jIGRlZmluaW5nIOKAmGxlc3PigJkuIEluIHRoZSBjYXNlIG9mIG11bHRpcGxlIGl0ZW1zIGJlaW5nIGVxdWFsbHkgbWF4aW1hbCwgdGhlIGZpcnN0IHN1Y2gKCS8vIGVsZW1lbnQgaXMgcmV0dXJuZWQuIFBhbmljcyBpZiB0aGVyZSBhcmUgbm8gZWxlbWVudHMuCglNYXhCeShsZXNzIGZ1bmMoe3suVHlwZX19LCB7ey5UeXBlfX0pIGJvb2wpIHt7LlR5cGV9fQp7ey0gaWYgLk51bWVyaWN9fQoKCS8vIFN1bSByZXR1cm5zIHRoZSBzdW0gb2YgYWxsIHRoZSBlbGVtZW50cyBpbiB0aGUgY29sbGVjdGlvbi4KCVN1bSgpIHt7LlR5cGUuTmFtZX19Cnt7LSBlbmR9fQp9Cg==\"")
		packr.PackJSONBytes("builtin", "fast/list.tpl", "\"\"")
		packr.PackJSONBytes("builtin", "fast/map.tpl", "\"\"")
		packr.PackJSONBytes("builtin", "fast/queue.tpl", "\"\"")
		packr.PackJSONBytes("builtin", "fast/set.tpl", "\"\"")
		packr.PackJSONBytes("builtin", "immutable/collection.tpl", "\"Ly8gR2VuZXJhdGVkIGZyb20ge3suVGVtcGxhdGVGaWxlfX0gd2l0aCBUeXBlPXt7LlR5cGUuTmFtZX19Ci8vIG9wdGlvbnM6IENvbXBhcmFibGU6e3suQ29tcGFyYWJsZX19IE51bWVyaWM6e3suTnVtZXJpY319IE9yZGVyZWQ6e3suT3JkZXJlZH19IFN0cmluZ2VyOnt7LlN0cmluZ2VyfX0gTXV0YWJsZTpkaXNhYmxlZAovLyBieSBydW50ZW1wbGF0ZSB7ey5BcHBWZXJzaW9ufX0KLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qb2hhbmJyYW5kaG9yc3QvcnVudGVtcGxhdGUvYmxvYi9tYXN0ZXIvQlVJTFRJTi5tZAoKcGFja2FnZSB7ey5QYWNrYWdlfX0KCnt7aWYgLkhhc0ltcG9ydH19CmltcG9ydCAoCgl7ey5JbXBvcnR9fQopCgp7e2VuZCAtfX0KLy8ge3suUHJlZml4LlV9fXt7LlR5cGUuVX19U2l6ZXIgZGVmaW5lcyBhbiBpbnRlcmZhY2UgZm9yIHNpemluZyBtZXRob2RzIG9uIHt7LlR5cGUuTmFtZX19IGNvbGxlY3Rpb25zLgp0eXBlIHt7LlByZWZpeC5VfX17ey5UeXBlLlV9fVNpemVyIGludGVyZmFjZSB7CgkvLyBJc0VtcHR5IHRlc3RzIHdoZXRoZXIge3suUHJlZml4LlV9fXt7LlR5cGUuVX19Q29sbGVjdGlvbiBpcyBlbXB0eS4KCUlzRW1wdHkoKSBib29sCgoJLy8gTm9uRW1wdHkgdGVzdHMgd2hldGhlciB7ey5QcmVmaXguVX19e3suVHlwZS5VfX1Db2xsZWN0aW9uIGlzIGVtcHR5LgoJTm9uRW1wdHkoKSBib29sCgoJLy8gU2l6ZSByZXR1cm5zIHRoZSBudW1iZXIgb2YgaXRlbXMgaW4gdGhlIGxpc3QgLSBhbiBhbGlhcyBvZiBMZW4oKS4KCVNpemUoKSBpbnQKfQp7ey0gaWYgLlN0cmluZ2VyfX0KCi8vIHt7LlByZWZpeC5VfX17ey5UeXBlLlV9fU1rU3RyaW5nZXIgZGVmaW5lcyBhbiBpbnRlcmZhY2UgZm9yIHN0cmluZ2VyIG1ldGhvZHMgb24ge3suVHlwZS5OYW1lfX0gY29sbGVjdGlvbnMuCnR5cGUge3suUHJlZml4LlV9fXt7LlR5cGUuVX19TWtTdHJpbmdlciBpbnRlcmZhY2UgewoJLy8gU3RyaW5nIGltcGxlbWVudHMgdGhlIFN0cmluZ2VyIGludGVyZmFjZSB0byByZW5kZXIgdGhlIGxpc3QgYXMgYSBjb21tYS1zZXBhcmF0ZWQgc3RyaW5nIGVuY2xvc2VkCgkvLyBpbiBzcXVhcmUgYnJhY2tldHMuCglTdHJpbmcoKSBzdHJpbmcKCgkvLyBNa1N0cmluZyBjb25jYXRlbmF0ZXMgdGhlIHZhbHVlcyBhcyBhIHN0cmluZyB1c2luZyBhIHN1cHBsaWVkIHNlcGFyYXRvci4gTm8gZW5jbG9zaW5nIG1hcmtzIGFyZSBhZGRlZC4KCU1rU3RyaW5nKHNlcCBzdHJpbmcpIHN0cmluZwoKCS8vIE1rU3RyaW5nMyBjb25jYXRlbmF0ZXMgdGhlIHZhbHVlcyBhcyBhIHN0cmluZywgdXNpbmcgdGhlIHByZWZpeCwgc2VwYXJhdG9yIGFuZCBzdWZmaXggc3VwcGxpZWQuCglNa1N0cmluZzMoYmVmb3JlLCBiZXR3ZWVuLCBhZnRlciBzdHJpbmcpIHN0cmluZwoKCS8vIGltcGxlbWVudHMganNvbi5NYXJzaGFsZXIgaW50ZXJmYWNlIHsKCU1hcnNoYWxKU09OKCkgKFtdYnl0ZSwgZXJyb3IpCgoJLy8gU3RyaW5nTGlzdCBnZXRzIGEgbGlzdCBvZiBzdHJpbmdzIHRoYXQgZGVwaWN0cyBhbGwgdGhlIGVsZW1lbnRzLgoJU3RyaW5nTGlzdCgpIFtdc3RyaW5nCn0Ke3stIGVuZH19CgovLyB7ey5QcmVmaXguVX19e3suVHlwZS5VfX1Db2xsZWN0aW9uIGRlZmluZXMgYW4gaW50ZXJmYWNlIGZvciBjb21tb24gY29sbGVjdGlvbiBtZXRob2RzIG9uIHt7LlR5cGUuTmFtZX19Lgp0eXBlIHt7LlByZWZpeC5VfX17ey5UeXBlLlV9fUNvbGxlY3Rpb24gaW50ZXJmYWNlIHsKCXt7LlByZWZpeC5VfX17ey5UeXBlLlV9fVNpemVyCnt7LSBpZiAuU3RyaW5nZXJ9fQoJe3suUHJlZml4LlV9fXt7LlR5cGUuVX19TWtTdHJpbmdlcgp7ey0gZW5kfX0KCgkvLyBJc1NlcXVlbmNlIHJldHVybnMgdHJ1ZSBmb3IgbGlzdHMgYW5kIHF1ZXVlcy4KCUlzU2VxdWVuY2UoKSBib29sCgoJLy8gSXNTZXQgcmV0dXJucyBmYWxzZSBmb3IgbGlzdHMgYW5kIHF1ZXVlcy4KCUlzU2V0KCkgYm9vbAp7ey0gaWYgLlRvTGlzdH19CgoJLy8gVG9MaXN0IHJldHVybnMgYSBzaGFsbG93IGNvcHkgYXMgYSBsaXN0LgoJVG9MaXN0KCkgKnt7LlByZWZpeC5VfX17ey5UeXBlLlV9fUxpc3QKe3stIGVuZH19Cnt7LSBpZiAuVG9TZXR9fQoKCS8vIFRvU2V0IHJldHVybnMgYSBzaGFsbG93IGNvcHkgYXMgYSBzZXQuCglUb1NldCgpICp7ey5QcmVmaXguVX19e3suVHlwZS5VfX1TZXQKe3stIGVuZH19CgoJLy8gVG9TbGljZSByZXR1cm5zIGEgc2hhbGxvdyBjb3B5IGFzIGEgcGxhaW4gc2xpY2UuCglUb1NsaWNlKCkgW117ey5UeXBlLk5hbWV9fQoKCS8vIFRvSW50ZXJmYWNlU2xpY2UgcmV0dXJucyBhIHNoYWxsb3cgY29weSBhcyBhIHNsaWNlIG9mIGFyYml0cmFyeSB0eXBlLgoJVG9JbnRlcmZhY2VTbGljZSgpIFtdaW50ZXJmYWNle30KCgkvLyBFeGlzdHMgdmVyaWZpZXMgdGhhdCBvbmUgb3IgbW9yZSBlbGVtZW50cyBvZiB7ey5QcmVmaXguVX19e3suVHlwZS5VfX1Db2xsZWN0aW9uIHJldHVybiB0cnVlIGZvciB0aGUgcHJlZGljYXRlIHAuCglFeGlzdHMocCBmdW5jKHt7LlR5cGUuTmFtZX19KSBib29sKSBib29sCgoJLy8gRm9yYWxsIHZlcmlmaWVzIHRoYXQgYWxsIGVsZW1lbnRzIG9mIHt7LlByZWZpeC5VfX17ey5UeXBlLlV9fUNvbGxlY3Rpb24gcmV0dXJuIHRydWUgZm9yIHRoZSBwcmVkaWNhdGUgcC4KCUZvcmFsbChwIGZ1bmMoe3suVHlwZS5OYW1lfX0pIGJvb2wpIGJvb2wKCgkvLyBGb3JlYWNoIGl0ZXJhdGVzIG92ZXIge3suUHJlZml4LlV9fXt7LlR5cGUuVX19Q29sbGVjdGlvbiBhbmQgZXhlY3V0ZXMgdGhlIGZ1bmN0aW9uIGYgYWdhaW5zdCBlYWNoIGVsZW1lbnQuCglGb3JlYWNoKGYgZnVuYyh7ey5UeXBlLk5hbWV9fSkpCgoJLy8gRmluZCByZXR1cm5zIHRoZSBmaXJzdCB7ey5UeXBlLk5hbWV9fSB0aGF0IHJldHVybnMgdHJ1ZSBmb3IgdGhlIHByZWRpY2F0ZSBwLgoJLy8gRmFsc2UgaXMgcmV0dXJuZWQgaWYgbm9uZSBtYXRjaC4KCUZpbmQocCBmdW5jKHt7LlR5cGUuTmFtZX19KSBib29sKSAoe3suVHlwZS5OYW1lfX0sIGJvb2wpCgoJLy8gU2VuZCByZXR1cm5zIGEgY2hhbm5lbCB0aGF0IHdpbGwgc2VuZCBhbGwgdGhlIGVsZW1lbnRzIGluIG9yZGVyLiBDYW4gYmUgdXNlZCB3aXRoIHRoZSBwbHVtYmluZyBjb2RlLCBmb3IgZXhhbXBsZS4KCS8vIEEgZ29yb3V0aW5lIGlzIGNyZWF0ZWQgdG8gc2VuZCB0aGUgZWxlbWVudHM7IHRoaXMgb25seSB0ZXJtaW5hdGVzIHdoZW4gYWxsIHRoZSBlbGVtZW50cyBoYXZlIGJlZW4gY29uc3VtZWQKCVNlbmQoKSA8LWNoYW4ge3suVHlwZS5OYW1lfX0KCgkvLyBDb3VudEJ5IGdpdmVzIHRoZSBudW1iZXIgZWxlbWVudHMgb2Yge3suUHJlZml4LlV9fXt7LlR5cGUuVX19Q29sbGVjdGlvbiB0aGF0IHJldHVybiB0cnVlIGZvciB0aGUgcHJlZGljYXRlIHAuCglDb3VudEJ5KHAgZnVuYyh7ey5UeXBlLk5hbWV9fSkgYm9vbCkgaW50Cnt7LSBpZiAuQ29tcGFyYWJsZX19CgoJLy8gQ29udGFpbnMgZGV0ZXJtaW5lcyB3aGV0aGVyIGEgZ2l2ZW4gaXRlbSBpcyBhbHJlYWR5IGluIHRoZSBjb2xsZWN0aW9uLCByZXR1cm5pbmcgdHJ1ZSBpZiBzby4KCUNvbnRhaW5zKHYge3suVHlwZS5OYW1lfX0pIGJvb2wKCgkvLyBDb250YWluc0FsbCBkZXRlcm1pbmVzIHdoZXRoZXIgdGhlIGdpdmVuIGl0ZW1zIGFyZSBhbGwgaW4gdGhlIGNvbGxlY3Rpb24sIHJldHVybmluZyB0cnVlIGlmIHNvLgoJQ29udGFpbnNBbGwodiAuLi57ey5UeXBlLk5hbWV9fSkgYm9vbAp7ey0gZW5kfX0Ke3stIGlmIC5PcmRlcmVkfX0KCgkvLyBNaW4gcmV0dXJucyB0aGUgbWluaW11bSB2YWx1ZSBvZiBhbGwgdGhlIGl0ZW1zIGluIHRoZSBjb2xsZWN0aW9uLiBQYW5pY3MgaWYgdGhlcmUgYXJlIG5vIGVsZW1lbnRzLgoJTWluKCkge3suVHlwZS5OYW1lfX0KCgkvLyBNYXggcmV0dXJucyB0aGUgbWluaW11bSB2YWx1ZSBvZiBhbGwgdGhlIGl0ZW1zIGluIHRoZSBjb2xsZWN0aW9uLiBQYW5pY3MgaWYgdGhlcmUgYXJlIG5vIGVsZW1lbnRzLgoJTWF4KCkge3suVHlwZS5OYW1lfX0Ke3stIGVuZH19CgoJLy8gTWluQnkgcmV0dXJucyBhbiBlbGVtZW50IG9mIHt7LlByZWZpeC5VfX17ey5UeXBlLlV9fUNvbGxlY3Rpb24gY29udGFpbmluZyB0aGUgbWluaW11bSB2YWx1ZSwgd2hlbiBjb21wYXJlZCB0byBvdGhlciBlbGVtZW50cwoJLy8gdXNpbmcgYSBwYXNzZWQgZnVuYyBkZWZpbmluZyDigJhsZXNz4oCZLiBJbiB0aGUgY2FzZSBvZiBtdWx0aXBsZSBpdGVtcyBiZWluZyBlcXVhbGx5IG1pbmltYWwsIHRoZSBmaXJzdCBzdWNoCgkvLyBlbGVtZW50IGlzIHJldHVybmVkLiBQYW5pY3MgaWYgdGhlcmUgYXJlIG5vIGVsZW1lbnRzLgoJTWluQnkobGVzcyBmdW5jKHt7LlR5cGUuTmFtZX19LCB7ey5UeXBlLk5hbWV9fSkgYm9vbCkge3suVHlwZS5OYW1lfX0KCgkvLyBNYXhCeSByZXR1cm5zIGFuIGVsZW1lbnQgb2Yge3suUHJlZml4LlV9fXt7LlR5cGUuVX19Q29sbGVjdGlvbiBjb250YWluaW5nIHRoZSBtYXhpbXVtIHZhbHVlLCB3aGVuIGNvbXBhcmVkIHRvIG90aGVyIGVsZW1lbnRzCgkvLyB1c2luZyBhIHBhc3NlZCBmdW5jIGRlZmluaW5nIOKAmGxlc3PigJkuIEluIHRoZSBjYXNlIG9mIG11bHRpcGxlIGl0ZW1zIGJlaW5nIGVxdWFsbHkgbWF4aW1hbCwgdGhlIGZpcnN0IHN1Y2gKCS8vIGVsZW1lbnQgaXMgcmV0dXJuZWQuIFBhbmljcyBpZiB0aGVyZSBhcmUgbm8gZWxlbWVudHMuCglNYXhCeShsZXNzIGZ1bmMoe3suVHlwZS5OYW1lfX0sIHt7LlR5cGUuTmFtZX19KSBib29sKSB7ey5UeXBlLk5hbWV9fQp7ey0gaWYgLk51bWVyaWN9fQoKCS8vIFN1bSByZXR1cm5zIHRoZSBzdW0gb2YgYWxsIHRoZSBlbGVtZW50cyBpbiB0aGUgY29sbGVjdGlvbi4KCVN1bSgpIHt7LlR5cGUuTmFtZX19Cnt7LSBlbmR9fQp9Cg==\"")
		packr.PackJSONBytes("builtin", "immutable/list.tpl", "\"\"")
		packr.PackJSONBytes("builtin", "immutable/map.tpl", "\"\"")
		packr.PackJSONBytes("builtin", "immutable/set.tpl", "\"\"")
		packr.PackJSONBytes("builtin", "immutable-list-api.txt", "\"ZnVuYyBOZXdUeXBlTGlzdCh2YWx1ZXMgLi4uVHlwZSkgKlR5cGVMaXN0CmZ1bmMgQ29udmVydFR5cGVMaXN0KHZhbHVlcyAuLi5pbnRlcmZhY2V7fSkgKCpUeXBlTGlzdCwgYm9vbCkKZnVuYyBCdWlsZFR5cGVMaXN0RnJvbUNoYW4oc291cmNlIDwtY2hhbiBUeXBlKSAqVHlwZUxpc3QKZnVuYyAobGlzdCAqVHlwZUxpc3QpIElzU2VxdWVuY2UoKSBib29sCmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBJc1NldCgpIGJvb2wKZnVuYyAobGlzdCAqVHlwZUxpc3QpIFRvTGlzdCgpICpUeXBlTGlzdApmdW5jIChsaXN0ICpUeXBlTGlzdCkgVG9TZXQoKSAqVHlwZVNldApmdW5jIChsaXN0ICpUeXBlTGlzdCkgVG9TbGljZSgpIFtdVHlwZQpmdW5jIChsaXN0ICpUeXBlTGlzdCkgVG9JbnRlcmZhY2VTbGljZSgpIFtdaW50ZXJmYWNle30KZnVuYyAobGlzdCAqVHlwZUxpc3QpIENsb25lKCkgKlR5cGVMaXN0CmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBHZXQoaSBpbnQpIFR5cGUKZnVuYyAobGlzdCAqVHlwZUxpc3QpIEhlYWQoKSBUeXBlCmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBIZWFkT3B0aW9uKCkgVHlwZQpmdW5jIChsaXN0ICpUeXBlTGlzdCkgTGFzdCgpIFR5cGUKZnVuYyAobGlzdCAqVHlwZUxpc3QpIExhc3RPcHRpb24oKSBUeXBlCmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBUYWlsKCkgKlR5cGVMaXN0CmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBJbml0KCkgKlR5cGVMaXN0CmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBJc0VtcHR5KCkgYm9vbApmdW5jIChsaXN0ICpUeXBlTGlzdCkgTm9uRW1wdHkoKSBib29sCmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBTaXplKCkgaW50CmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBMZW4oKSBpbnQKZnVuYyAobGlzdCAqVHlwZUxpc3QpIENvbnRhaW5zKHYgVHlwZSkgYm9vbApmdW5jIChsaXN0ICpUeXBlTGlzdCkgQ29udGFpbnNBbGwoaSAuLi5UeXBlKSBib29sCmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBFeGlzdHMocCBmdW5jKFR5cGUpIGJvb2wpIGJvb2wKZnVuYyAobGlzdCAqVHlwZUxpc3QpIEZvcmFsbChwIGZ1bmMoVHlwZSkgYm9vbCkgYm9vbApmdW5jIChsaXN0ICpUeXBlTGlzdCkgRm9yZWFjaChmIGZ1bmMoVHlwZSkpCmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBTZW5kKCkgPC1jaGFuIFR5cGUKZnVuYyAobGlzdCAqVHlwZUxpc3QpIFJldmVyc2UoKSAqVHlwZUxpc3QKZnVuYyAobGlzdCAqVHlwZUxpc3QpIFNodWZmbGUoKSAqVHlwZUxpc3QKZnVuYyAobGlzdCAqVHlwZUxpc3QpIEFwcGVuZChtb3JlIC4uLlR5cGUpICpUeXBlTGlzdApmdW5jIChsaXN0ICpUeXBlTGlzdCkgVGFrZShuIGludCkgKlR5cGVMaXN0CmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBEcm9wKG4gaW50KSAqVHlwZUxpc3QKZnVuYyAobGlzdCAqVHlwZUxpc3QpIFRha2VMYXN0KG4gaW50KSAqVHlwZUxpc3QKZnVuYyAobGlzdCAqVHlwZUxpc3QpIERyb3BMYXN0KG4gaW50KSAqVHlwZUxpc3QKZnVuYyAobGlzdCAqVHlwZUxpc3QpIFRha2VXaGlsZShwIGZ1bmMoVHlwZSkgYm9vbCkgKlR5cGVMaXN0CmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBEcm9wV2hpbGUocCBmdW5jKFR5cGUpIGJvb2wpICpUeXBlTGlzdApmdW5jIChsaXN0ICpUeXBlTGlzdCkgRmluZChwIGZ1bmMoVHlwZSkgYm9vbCkgKFR5cGUsIGJvb2wpCmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBGaWx0ZXIocCBmdW5jKFR5cGUpIGJvb2wpICpUeXBlTGlzdApmdW5jIChsaXN0ICpUeXBlTGlzdCkgUGFydGl0aW9uKHAgZnVuYyhUeXBlKSBib29sKSAoKlR5cGVMaXN0LCAqVHlwZUxpc3QpCmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBNYXAoZiBmdW5jKFR5cGUpIFR5cGUpICpUeXBlTGlzdApmdW5jIChsaXN0ICpUeXBlTGlzdCkgRmxhdE1hcChmIGZ1bmMoVHlwZSkgW11UeXBlKSAqVHlwZUxpc3QKZnVuYyAobGlzdCAqVHlwZUxpc3QpIENvdW50QnkocCBmdW5jKFR5cGUpIGJvb2wpIChyZXN1bHQgaW50KQpmdW5jIChsaXN0ICpUeXBlTGlzdCkgTWluQnkobGVzcyBmdW5jKFR5cGUsIFR5cGUpIGJvb2wpIFR5cGUKZnVuYyAobGlzdCAqVHlwZUxpc3QpIE1heEJ5KGxlc3MgZnVuYyhUeXBlLCBUeXBlKSBib29sKSBUeXBlCmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBEaXN0aW5jdEJ5KGVxdWFsIGZ1bmMoVHlwZSwgVHlwZSkgYm9vbCkgKlR5cGVMaXN0CmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBJbmRleFdoZXJlKHAgZnVuYyhUeXBlKSBib29sKSBpbnQKZnVuYyAobGlzdCAqVHlwZUxpc3QpIEluZGV4V2hlcmUyKHAgZnVuYyhUeXBlKSBib29sLCBmcm9tIGludCkgaW50CmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBMYXN0SW5kZXhXaGVyZShwIGZ1bmMoVHlwZSkgYm9vbCkgaW50CmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBMYXN0SW5kZXhXaGVyZTIocCBmdW5jKFR5cGUpIGJvb2wsIGJlZm9yZSBpbnQpIGludApmdW5jIChzbCBzb3J0YWJsZVR5cGVMaXN0KSBMZXNzKGksIGogaW50KSBib29sCmZ1bmMgKHNsIHNvcnRhYmxlVHlwZUxpc3QpIExlbigpIGludApmdW5jIChzbCBzb3J0YWJsZVR5cGVMaXN0KSBTd2FwKGksIGogaW50KQpmdW5jIChsaXN0ICpUeXBlTGlzdCkgU29ydEJ5KGxlc3MgZnVuYyhpLCBqIFR5cGUpIGJvb2wpICpUeXBlTGlzdApmdW5jIChsaXN0ICpUeXBlTGlzdCkgU3RhYmxlU29ydEJ5KGxlc3MgZnVuYyhpLCBqIFR5cGUpIGJvb2wpICpUeXBlTGlzdApmdW5jIChsaXN0ICpUeXBlTGlzdCkgU29ydGVkKCkgKlR5cGVMaXN0CmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBTdGFibGVTb3J0ZWQoKSAqVHlwZUxpc3QKZnVuYyAobGlzdCAqVHlwZUxpc3QpIE1pbigpIFR5cGUKZnVuYyAobGlzdCAqVHlwZUxpc3QpIE1heCgpIChyZXN1bHQgVHlwZSkKZnVuYyAobGlzdCAqVHlwZUxpc3QpIFN1bSgpIFR5cGUKZnVuYyAobGlzdCAqVHlwZUxpc3QpIFN0cmluZ0xpc3QoKSBbXXN0cmluZwpmdW5jIChsaXN0ICpUeXBlTGlzdCkgU3RyaW5nKCkgc3RyaW5nCmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBNa1N0cmluZyhzZXAgc3RyaW5nKSBzdHJpbmcKZnVuYyAobGlzdCAqVHlwZUxpc3QpIE1rU3RyaW5nMyhiZWZvcmUsIGJldHdlZW4sIGFmdGVyIHN0cmluZykgc3RyaW5nCmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBVbm1hcnNoYWxKU09OKGIgW11ieXRlKSBlcnJvcgpmdW5jIChsaXN0IFR5cGVMaXN0KSBNYXJzaGFsSlNPTigpIChbXWJ5dGUsIGVycm9yKQpmdW5jIChsaXN0ICpUeXBlTGlzdCkgR29iRGVjb2RlKGIgW11ieXRlKSBlcnJvcgpmdW5jIChsaXN0IFR5cGVMaXN0KSBHb2JFbmNvZGUoKSAoW11ieXRlLCBlcnJvcikK\"")
		packr.PackJSONBytes("builtin", "immutable-map-api.txt", "\"ZnVuYyAodHMgS2V5VHlwZVR1cGxlcykgQXBwZW5kMShrIEtleSwgdiBUeXBlKSBLZXlUeXBlVHVwbGVzCmZ1bmMgKHRzIEtleVR5cGVUdXBsZXMpIEFwcGVuZDIoazEgS2V5LCB2MSBUeXBlLCBrMiBLZXksIHYyIFR5cGUpIEtleVR5cGVUdXBsZXMKZnVuYyAodHMgS2V5VHlwZVR1cGxlcykgQXBwZW5kMyhrMSBLZXksIHYxIFR5cGUsIGsyIEtleSwgdjIgVHlwZSwgazMgS2V5LCB2MyBUeXBlKSBLZXlUeXBlVHVwbGVzCmZ1bmMgS2V5VHlwZVppcChrZXlzIC4uLktleSkgS2V5VHlwZVR1cGxlcwpmdW5jICh0cyBLZXlUeXBlVHVwbGVzKSBWYWx1ZXModmFsdWVzIC4uLlR5cGUpIEtleVR5cGVUdXBsZXMKZnVuYyBOZXdLZXlUeXBlTWFwMShrIEtleSwgdiBUeXBlKSAqS2V5VHlwZU1hcApmdW5jIE5ld0tleVR5cGVNYXAoa3YgLi4uS2V5VHlwZVR1cGxlKSAqS2V5VHlwZU1hcApmdW5jIChtbSAqS2V5VHlwZU1hcCkgS2V5cygpIFtdS2V5CmZ1bmMgKG1tICpLZXlUeXBlTWFwKSBWYWx1ZXMoKSBbXVR5cGUKZnVuYyAobW0gKktleVR5cGVNYXApIFRvU2xpY2UoKSBbXUtleVR5cGVUdXBsZQpmdW5jIChtbSAqS2V5VHlwZU1hcCkgR2V0KGsgS2V5KSAoVHlwZSwgYm9vbCkKZnVuYyAobW0gKktleVR5cGVNYXApIFB1dChrIEtleSwgdiBUeXBlKSAqS2V5VHlwZU1hcApmdW5jIChtbSAqS2V5VHlwZU1hcCkgQ29udGFpbnNLZXkoayBLZXkpIGJvb2wKZnVuYyAobW0gKktleVR5cGVNYXApIENvbnRhaW5zQWxsS2V5cyhrayAuLi5LZXkpIGJvb2wKZnVuYyAobW0gKktleVR5cGVNYXApIFNpemUoKSBpbnQKZnVuYyAobW0gKktleVR5cGVNYXApIElzRW1wdHkoKSBib29sCmZ1bmMgKG1tICpLZXlUeXBlTWFwKSBOb25FbXB0eSgpIGJvb2wKZnVuYyAobW0gKktleVR5cGVNYXApIEZvcmVhY2goZiBmdW5jKEtleSwgVHlwZSkpCmZ1bmMgKG1tICpLZXlUeXBlTWFwKSBGb3JhbGwoZiBmdW5jKEtleSwgVHlwZSkgYm9vbCkgYm9vbApmdW5jIChtbSAqS2V5VHlwZU1hcCkgRXhpc3RzKHAgZnVuYyhLZXksIFR5cGUpIGJvb2wpIGJvb2wKZnVuYyAobW0gKktleVR5cGVNYXApIEZpbmQocCBmdW5jKEtleSwgVHlwZSkgYm9vbCkgKEtleVR5cGVUdXBsZSwgYm9vbCkKZnVuYyAobW0gKktleVR5cGVNYXApIEZpbHRlcihwIGZ1bmMoS2V5LCBUeXBlKSBib29sKSAqS2V5VHlwZU1hcApmdW5jIChtbSAqS2V5VHlwZU1hcCkgUGFydGl0aW9uKHAgZnVuYyhLZXksIFR5cGUpIGJvb2wpIChtYXRjaGluZyAqS2V5VHlwZU1hcCwgb3RoZXJzICpLZXlUeXBlTWFwKQpmdW5jIChtbSAqS2V5VHlwZU1hcCkgTWFwKGYgZnVuYyhLZXksIFR5cGUpIChLZXksIFR5cGUpKSAqS2V5VHlwZU1hcApmdW5jIChtbSAqS2V5VHlwZU1hcCkgRmxhdE1hcChmIGZ1bmMoS2V5LCBUeXBlKSBbXUtleVR5cGVUdXBsZSkgKktleVR5cGVNYXAKZnVuYyAobW0gKktleVR5cGVNYXApIENsb25lKCkgKktleVR5cGVNYXAKZnVuYyAobW0gKktleVR5cGVNYXApIFN0cmluZygpIHN0cmluZwpmdW5jIChtbSAqS2V5VHlwZU1hcCkgTWtTdHJpbmcoc2VwIHN0cmluZykgc3RyaW5nCmZ1bmMgKG1tICpLZXlUeXBlTWFwKSBNa1N0cmluZzMoYmVmb3JlLCBiZXR3ZWVuLCBhZnRlciBzdHJpbmcpIHN0cmluZwpmdW5jIChtbSAqS2V5VHlwZU1hcCkgVW5tYXJzaGFsSlNPTihiIFtdYnl0ZSkgZXJyb3IKZnVuYyAobW0gKktleVR5cGVNYXApIE1hcnNoYWxKU09OKCkgKFtdYnl0ZSwgZXJyb3IpCmZ1bmMgKG1tICpLZXlUeXBlTWFwKSBHb2JEZWNvZGUoYiBbXWJ5dGUpIGVycm9yCmZ1bmMgKG1tICpLZXlUeXBlTWFwKSBHb2JFbmNvZGUoKSAoW11ieXRlLCBlcnJvcikK\"")
		packr.PackJSONBytes("builtin", "immutable-plist-api.txt", "\"ZnVuYyBOZXdUeXBlTGlzdCh2YWx1ZXMgLi4uVHlwZSkgKlR5cGVMaXN0CmZ1bmMgQ29udmVydFR5cGVMaXN0KHZhbHVlcyAuLi5pbnRlcmZhY2V7fSkgKCpUeXBlTGlzdCwgYm9vbCkKZnVuYyBCdWlsZFR5cGVMaXN0RnJvbUNoYW4oc291cmNlIDwtY2hhbiBUeXBlKSAqVHlwZUxpc3QKZnVuYyAobGlzdCAqVHlwZUxpc3QpIElzU2VxdWVuY2UoKSBib29sCmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBJc1NldCgpIGJvb2wKZnVuYyAobGlzdCAqVHlwZUxpc3QpIFRvTGlzdCgpICpUeXBlTGlzdApmdW5jIChsaXN0ICpUeXBlTGlzdCkgVG9TZXQoKSAqVHlwZVNldApmdW5jIChsaXN0ICpUeXBlTGlzdCkgVG9TbGljZSgpIFtdVHlwZQpmdW5jIChsaXN0ICpUeXBlTGlzdCkgVG9JbnRlcmZhY2VTbGljZSgpIFtdaW50ZXJmYWNle30KZnVuYyAobGlzdCAqVHlwZUxpc3QpIENsb25lKCkgKlR5cGVMaXN0CmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBHZXQoaSBpbnQpIFR5cGUKZnVuYyAobGlzdCAqVHlwZUxpc3QpIEhlYWQoKSBUeXBlCmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBIZWFkT3B0aW9uKCkgVHlwZQpmdW5jIChsaXN0ICpUeXBlTGlzdCkgTGFzdCgpIFR5cGUKZnVuYyAobGlzdCAqVHlwZUxpc3QpIExhc3RPcHRpb24oKSBUeXBlCmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBUYWlsKCkgKlR5cGVMaXN0CmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBJbml0KCkgKlR5cGVMaXN0CmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBJc0VtcHR5KCkgYm9vbApmdW5jIChsaXN0ICpUeXBlTGlzdCkgTm9uRW1wdHkoKSBib29sCmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBTaXplKCkgaW50CmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBMZW4oKSBpbnQKZnVuYyAobGlzdCAqVHlwZUxpc3QpIENvbnRhaW5zKHYgVHlwZSkgYm9vbApmdW5jIChsaXN0ICpUeXBlTGlzdCkgQ29udGFpbnNBbGwoaSAuLi5UeXBlKSBib29sCmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBFeGlzdHMocCBmdW5jKFR5cGUpIGJvb2wpIGJvb2wKZnVuYyAobGlzdCAqVHlwZUxpc3QpIEZvcmFsbChwIGZ1bmMoVHlwZSkgYm9vbCkgYm9vbApmdW5jIChsaXN0ICpUeXBlTGlzdCkgRm9yZWFjaChmIGZ1bmMoVHlwZSkpCmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBTZW5kKCkgPC1jaGFuIFR5cGUKZnVuYyAobGlzdCAqVHlwZUxpc3QpIFJldmVyc2UoKSAqVHlwZUxpc3QKZnVuYyAobGlzdCAqVHlwZUxpc3QpIFNodWZmbGUoKSAqVHlwZUxpc3QKZnVuYyAobGlzdCAqVHlwZUxpc3QpIEFwcGVuZChtb3JlIC4uLlR5cGUpICpUeXBlTGlzdApmdW5jIChsaXN0ICpUeXBlTGlzdCkgVGFrZShuIGludCkgKlR5cGVMaXN0CmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBEcm9wKG4gaW50KSAqVHlwZUxpc3QKZnVuYyAobGlzdCAqVHlwZUxpc3QpIFRha2VMYXN0KG4gaW50KSAqVHlwZUxpc3QKZnVuYyAobGlzdCAqVHlwZUxpc3QpIERyb3BMYXN0KG4gaW50KSAqVHlwZUxpc3QKZnVuYyAobGlzdCAqVHlwZUxpc3QpIFRha2VXaGlsZShwIGZ1bmMoVHlwZSkgYm9vbCkgKlR5cGVMaXN0CmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBEcm9wV2hpbGUocCBmdW5jKFR5cGUpIGJvb2wpICpUeXBlTGlzdApmdW5jIChsaXN0ICpUeXBlTGlzdCkgRmluZChwIGZ1bmMoVHlwZSkgYm9vbCkgKFR5cGUsIGJvb2wpCmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBGaWx0ZXIocCBmdW5jKFR5cGUpIGJvb2wpICpUeXBlTGlzdApmdW5jIChsaXN0ICpUeXBlTGlzdCkgUGFydGl0aW9uKHAgZnVuYyhUeXBlKSBib29sKSAoKlR5cGVMaXN0LCAqVHlwZUxpc3QpCmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBNYXAoZiBmdW5jKFR5cGUpIFR5cGUpICpUeXBlTGlzdApmdW5jIChsaXN0ICpUeXBlTGlzdCkgRmxhdE1hcChmIGZ1bmMoVHlwZSkgW11UeXBlKSAqVHlwZUxpc3QKZnVuYyAobGlzdCAqVHlwZUxpc3QpIENvdW50QnkocCBmdW5jKFR5cGUpIGJvb2wpIChyZXN1bHQgaW50KQpmdW5jIChsaXN0ICpUeXBlTGlzdCkgTWluQnkobGVzcyBmdW5jKFR5cGUsIFR5cGUpIGJvb2wpIFR5cGUKZnVuYyAobGlzdCAqVHlwZUxpc3QpIE1heEJ5KGxlc3MgZnVuYyhUeXBlLCBUeXBlKSBib29sKSBUeXBlCmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBEaXN0aW5jdEJ5KGVxdWFsIGZ1bmMoVHlwZSwgVHlwZSkgYm9vbCkgKlR5cGVMaXN0CmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBJbmRleFdoZXJlKHAgZnVuYyhUeXBlKSBib29sKSBpbnQKZnVuYyAobGlzdCAqVHlwZUxpc3QpIEluZGV4V2hlcmUyKHAgZnVuYyhUeXBlKSBib29sLCBmcm9tIGludCkgaW50CmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBMYXN0SW5kZXhXaGVyZShwIGZ1bmMoVHlwZSkgYm9vbCkgaW50CmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBMYXN0SW5kZXhXaGVyZTIocCBmdW5jKFR5cGUpIGJvb2wsIGJlZm9yZSBpbnQpIGludApmdW5jIChzbCBzb3J0YWJsZVR5cGVMaXN0KSBMZXNzKGksIGogaW50KSBib29sCmZ1bmMgKHNsIHNvcnRhYmxlVHlwZUxpc3QpIExlbigpIGludApmdW5jIChzbCBzb3J0YWJsZVR5cGVMaXN0KSBTd2FwKGksIGogaW50KQpmdW5jIChsaXN0ICpUeXBlTGlzdCkgU29ydEJ5KGxlc3MgZnVuYyhpLCBqIFR5cGUpIGJvb2wpICpUeXBlTGlzdApmdW5jIChsaXN0ICpUeXBlTGlzdCkgU3RhYmxlU29ydEJ5KGxlc3MgZnVuYyhpLCBqIFR5cGUpIGJvb2wpICpUeXBlTGlzdApmdW5jIChsaXN0ICpUeXBlTGlzdCkgU29ydGVkKCkgKlR5cGVMaXN0CmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBTdGFibGVTb3J0ZWQoKSAqVHlwZUxpc3QKZnVuYyAobGlzdCAqVHlwZUxpc3QpIE1pbigpIFR5cGUKZnVuYyAobGlzdCAqVHlwZUxpc3QpIE1heCgpIChyZXN1bHQgVHlwZSkKZnVuYyAobGlzdCAqVHlwZUxpc3QpIFN1bSgpIFR5cGUKZnVuYyAobGlzdCAqVHlwZUxpc3QpIFN0cmluZ0xpc3QoKSBbXXN0cmluZwpmdW5jIChsaXN0ICpUeXBlTGlzdCkgU3RyaW5nKCkgc3RyaW5nCmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBNa1N0cmluZyhzZXAgc3RyaW5nKSBzdHJpbmcKZnVuYyAobGlzdCAqVHlwZUxpc3QpIE1rU3RyaW5nMyhiZWZvcmUsIGJldHdlZW4sIGFmdGVyIHN0cmluZykgc3RyaW5nCmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBVbm1hcnNoYWxKU09OKGIgW11ieXRlKSBlcnJvcgpmdW5jIChsaXN0IFR5cGVMaXN0KSBNYXJzaGFsSlNPTigpIChbXWJ5dGUsIGVycm9yKQpmdW5jIChsaXN0ICpUeXBlTGlzdCkgR29iRGVjb2RlKGIgW11ieXRlKSBlcnJvcgpmdW5jIChsaXN0IFR5cGVMaXN0KSBHb2JFbmNvZGUoKSAoW11ieXRlLCBlcnJvcikK\"")
		packr.PackJSONBytes("builtin", "immutable-pmap-api.txt", "\"ZnVuYyAodHMgS2V5VHlwZVR1cGxlcykgQXBwZW5kMShrICpLZXksIHYgKlR5cGUpIEtleVR5cGVUdXBsZXMKZnVuYyAodHMgS2V5VHlwZVR1cGxlcykgQXBwZW5kMihrMSAqS2V5LCB2MSAqVHlwZSwgazIgKktleSwgdjIgKlR5cGUpIEtleVR5cGVUdXBsZXMKZnVuYyAodHMgS2V5VHlwZVR1cGxlcykgQXBwZW5kMyhrMSAqS2V5LCB2MSAqVHlwZSwgazIgKktleSwgdjIgKlR5cGUsIGszICpLZXksIHYzICpUeXBlKSBLZXlUeXBlVHVwbGVzCmZ1bmMgS2V5VHlwZVppcChrZXlzIC4uLipLZXkpIEtleVR5cGVUdXBsZXMKZnVuYyAodHMgS2V5VHlwZVR1cGxlcykgVmFsdWVzKHZhbHVlcyAuLi4qVHlwZSkgS2V5VHlwZVR1cGxlcwpmdW5jIE5ld0tleVR5cGVNYXAxKGsgKktleSwgdiAqVHlwZSkgKktleVR5cGVNYXAKZnVuYyBOZXdLZXlUeXBlTWFwKGt2IC4uLktleVR5cGVUdXBsZSkgKktleVR5cGVNYXAKZnVuYyAobW0gKktleVR5cGVNYXApIEtleXMoKSBbXSpLZXkKZnVuYyAobW0gKktleVR5cGVNYXApIFZhbHVlcygpIFtdKlR5cGUKZnVuYyAobW0gKktleVR5cGVNYXApIFRvU2xpY2UoKSBbXUtleVR5cGVUdXBsZQpmdW5jIChtbSAqS2V5VHlwZU1hcCkgR2V0KGsgKktleSkgKCpUeXBlLCBib29sKQpmdW5jIChtbSAqS2V5VHlwZU1hcCkgUHV0KGsgKktleSwgdiAqVHlwZSkgKktleVR5cGVNYXAKZnVuYyAobW0gKktleVR5cGVNYXApIENvbnRhaW5zS2V5KGsgKktleSkgYm9vbApmdW5jIChtbSAqS2V5VHlwZU1hcCkgQ29udGFpbnNBbGxLZXlzKGtrIC4uLipLZXkpIGJvb2wKZnVuYyAobW0gKktleVR5cGVNYXApIFNpemUoKSBpbnQKZnVuYyAobW0gKktleVR5cGVNYXApIElzRW1wdHkoKSBib29sCmZ1bmMgKG1tICpLZXlUeXBlTWFwKSBOb25FbXB0eSgpIGJvb2wKZnVuYyAobW0gKktleVR5cGVNYXApIEZvcmVhY2goZiBmdW5jKCpLZXksICpUeXBlKSkKZnVuYyAobW0gKktleVR5cGVNYXApIEZvcmFsbChmIGZ1bmMoKktleSwgKlR5cGUpIGJvb2wpIGJvb2wKZnVuYyAobW0gKktleVR5cGVNYXApIEV4aXN0cyhwIGZ1bmMoKktleSwgKlR5cGUpIGJvb2wpIGJvb2wKZnVuYyAobW0gKktleVR5cGVNYXApIEZpbmQocCBmdW5jKCpLZXksICpUeXBlKSBib29sKSAoS2V5VHlwZVR1cGxlLCBib29sKQpmdW5jIChtbSAqS2V5VHlwZU1hcCkgRmlsdGVyKHAgZnVuYygqS2V5LCAqVHlwZSkgYm9vbCkgKktleVR5cGVNYXAKZnVuYyAobW0gKktleVR5cGVNYXApIFBhcnRpdGlvbihwIGZ1bmMoKktleSwgKlR5cGUpIGJvb2wpIChtYXRjaGluZyAqS2V5VHlwZU1hcCwgb3RoZXJzICpLZXlUeXBlTWFwKQpmdW5jIChtbSAqS2V5VHlwZU1hcCkgTWFwKGYgZnVuYygqS2V5LCAqVHlwZSkgKCpLZXksICpUeXBlKSkgKktleVR5cGVNYXAKZnVuYyAobW0gKktleVR5cGVNYXApIEZsYXRNYXAoZiBmdW5jKCpLZXksICpUeXBlKSBbXUtleVR5cGVUdXBsZSkgKktleVR5cGVNYXAKZnVuYyAobW0gKktleVR5cGVNYXApIENsb25lKCkgKktleVR5cGVNYXAKZnVuYyAobW0gKktleVR5cGVNYXApIFN0cmluZygpIHN0cmluZwpmdW5jIChtbSAqS2V5VHlwZU1hcCkgTWtTdHJpbmcoc2VwIHN0cmluZykgc3RyaW5nCmZ1bmMgKG1tICpLZXlUeXBlTWFwKSBNa1N0cmluZzMoYmVmb3JlLCBiZXR3ZWVuLCBhZnRlciBzdHJpbmcpIHN0cmluZwpmdW5jIChtbSAqS2V5VHlwZU1hcCkgVW5tYXJzaGFsSlNPTihiIFtdYnl0ZSkgZXJyb3IKZnVuYyAobW0gKktleVR5cGVNYXApIE1hcnNoYWxKU09OKCkgKFtdYnl0ZSwgZXJyb3IpCmZ1bmMgKG1tICpLZXlUeXBlTWFwKSBHb2JEZWNvZGUoYiBbXWJ5dGUpIGVycm9yCmZ1bmMgKG1tICpLZXlUeXBlTWFwKSBHb2JFbmNvZGUoKSAoW11ieXRlLCBlcnJvcikK\"")
		packr.PackJSONBytes("builtin", "immutable-pset-api.txt", "\"ZnVuYyBOZXdUeXBlU2V0KHZhbHVlcyAuLi5UeXBlKSAqVHlwZVNldApmdW5jIENvbnZlcnRUeXBlU2V0KHZhbHVlcyAuLi5pbnRlcmZhY2V7fSkgKCpUeXBlU2V0LCBib29sKQpmdW5jIEJ1aWxkVHlwZVNldEZyb21DaGFuKHNvdXJjZSA8LWNoYW4gVHlwZSkgKlR5cGVTZXQKZnVuYyAoc2V0ICpUeXBlU2V0KSBJc1NlcXVlbmNlKCkgYm9vbApmdW5jIChzZXQgKlR5cGVTZXQpIElzU2V0KCkgYm9vbApmdW5jIChzZXQgKlR5cGVTZXQpIFRvTGlzdCgpICpUeXBlTGlzdApmdW5jIChzZXQgKlR5cGVTZXQpIFRvU2V0KCkgKlR5cGVTZXQKZnVuYyAoc2V0ICpUeXBlU2V0KSBUb1NsaWNlKCkgW11UeXBlCmZ1bmMgKHNldCAqVHlwZVNldCkgVG9JbnRlcmZhY2VTbGljZSgpIFtdaW50ZXJmYWNle30KZnVuYyAoc2V0ICpUeXBlU2V0KSBDbG9uZSgpICpUeXBlU2V0CmZ1bmMgKHNldCAqVHlwZVNldCkgSXNFbXB0eSgpIGJvb2wKZnVuYyAoc2V0ICpUeXBlU2V0KSBOb25FbXB0eSgpIGJvb2wKZnVuYyAoc2V0ICpUeXBlU2V0KSBTaXplKCkgaW50CmZ1bmMgKHNldCAqVHlwZVNldCkgQ2FyZGluYWxpdHkoKSBpbnQKZnVuYyAoc2V0ICpUeXBlU2V0KSBBZGQobW9yZSAuLi5UeXBlKSAqVHlwZVNldApmdW5jIChzZXQgKlR5cGVTZXQpIENvbnRhaW5zKGkgVHlwZSkgYm9vbApmdW5jIChzZXQgKlR5cGVTZXQpIENvbnRhaW5zQWxsKGkgLi4uVHlwZSkgYm9vbApmdW5jIChzZXQgKlR5cGVTZXQpIFVuaW9uKG90aGVyICpUeXBlU2V0KSAqVHlwZVNldApmdW5jIChzZXQgKlR5cGVTZXQpIEludGVyc2VjdChvdGhlciAqVHlwZVNldCkgKlR5cGVTZXQKZnVuYyAoc2V0ICpUeXBlU2V0KSBEaWZmZXJlbmNlKG90aGVyICpUeXBlU2V0KSAqVHlwZVNldApmdW5jIChzZXQgKlR5cGVTZXQpIFN5bW1ldHJpY0RpZmZlcmVuY2Uob3RoZXIgKlR5cGVTZXQpICpUeXBlU2V0CmZ1bmMgKHNldCAqVHlwZVNldCkgUmVtb3ZlKGkgVHlwZSkgKlR5cGVTZXQKZnVuYyAoc2V0ICpUeXBlU2V0KSBTZW5kKCkgPC1jaGFuIFR5cGUKZnVuYyAoc2V0ICpUeXBlU2V0KSBGb3JhbGwocCBmdW5jKFR5cGUpIGJvb2wpIGJvb2wKZnVuYyAoc2V0ICpUeXBlU2V0KSBFeGlzdHMocCBmdW5jKFR5cGUpIGJvb2wpIGJvb2wKZnVuYyAoc2V0ICpUeXBlU2V0KSBGb3JlYWNoKGYgZnVuYyhUeXBlKSkKZnVuYyAoc2V0ICpUeXBlU2V0KSBGaW5kKHAgZnVuYyhUeXBlKSBib29sKSAoVHlwZSwgYm9vbCkKZnVuYyAoc2V0ICpUeXBlU2V0KSBGaWx0ZXIocCBmdW5jKFR5cGUpIGJvb2wpICpUeXBlU2V0CmZ1bmMgKHNldCAqVHlwZVNldCkgUGFydGl0aW9uKHAgZnVuYyhUeXBlKSBib29sKSAoKlR5cGVTZXQsICpUeXBlU2V0KQpmdW5jIChzZXQgKlR5cGVTZXQpIE1hcChmIGZ1bmMoVHlwZSkgVHlwZSkgKlR5cGVTZXQKZnVuYyAoc2V0ICpUeXBlU2V0KSBGbGF0TWFwKGYgZnVuYyhUeXBlKSBbXVR5cGUpICpUeXBlU2V0CmZ1bmMgKHNldCAqVHlwZVNldCkgQ291bnRCeShwIGZ1bmMoVHlwZSkgYm9vbCkgKHJlc3VsdCBpbnQpCmZ1bmMgKHNldCAqVHlwZVNldCkgTWluKCkgVHlwZQpmdW5jIChzZXQgKlR5cGVTZXQpIE1heCgpIChyZXN1bHQgVHlwZSkKZnVuYyAoc2V0ICpUeXBlU2V0KSBNaW5CeShsZXNzIGZ1bmMoVHlwZSwgVHlwZSkgYm9vbCkgVHlwZQpmdW5jIChzZXQgKlR5cGVTZXQpIE1heEJ5KGxlc3MgZnVuYyhUeXBlLCBUeXBlKSBib29sKSBUeXBlCmZ1bmMgKHNldCAqVHlwZVNldCkgU3VtKCkgVHlwZQpmdW5jIChzZXQgKlR5cGVTZXQpIFN0cmluZ0xpc3QoKSBbXXN0cmluZwpmdW5jIChzZXQgKlR5cGVTZXQpIFN0cmluZygpIHN0cmluZwpmdW5jIChzZXQgKlR5cGVTZXQpIE1rU3RyaW5nKHNlcCBzdHJpbmcpIHN0cmluZwpmdW5jIChzZXQgKlR5cGVTZXQpIE1rU3RyaW5nMyhiZWZvcmUsIGJldHdlZW4sIGFmdGVyIHN0cmluZykgc3RyaW5nCmZ1bmMgKHNldCAqVHlwZVNldCkgVW5tYXJzaGFsSlNPTihiIFtdYnl0ZSkgZXJyb3IKZnVuYyAoc2V0ICpUeXBlU2V0KSBNYXJzaGFsSlNPTigpIChbXWJ5dGUsIGVycm9yKQpmdW5jIChzZXQgKlR5cGVTZXQpIFN0cmluZ01hcCgpIG1hcFtzdHJpbmddYm9vbApmdW5jIChzZXQgKlR5cGVTZXQpIEdvYkRlY29kZShiIFtdYnl0ZSkgZXJyb3IKZnVuYyAoc2V0IFR5cGVTZXQpIEdvYkVuY29kZSgpIChbXWJ5dGUsIGVycm9yKQo=\"")
		packr.PackJSONBytes("builtin", "immutable-set-api.txt", "\"ZnVuYyBOZXdUeXBlU2V0KHZhbHVlcyAuLi5UeXBlKSAqVHlwZVNldApmdW5jIENvbnZlcnRUeXBlU2V0KHZhbHVlcyAuLi5pbnRlcmZhY2V7fSkgKCpUeXBlU2V0LCBib29sKQpmdW5jIEJ1aWxkVHlwZVNldEZyb21DaGFuKHNvdXJjZSA8LWNoYW4gVHlwZSkgKlR5cGVTZXQKZnVuYyAoc2V0ICpUeXBlU2V0KSBJc1NlcXVlbmNlKCkgYm9vbApmdW5jIChzZXQgKlR5cGVTZXQpIElzU2V0KCkgYm9vbApmdW5jIChzZXQgKlR5cGVTZXQpIFRvTGlzdCgpICpUeXBlTGlzdApmdW5jIChzZXQgKlR5cGVTZXQpIFRvU2V0KCkgKlR5cGVTZXQKZnVuYyAoc2V0ICpUeXBlU2V0KSBUb1NsaWNlKCkgW11UeXBlCmZ1bmMgKHNldCAqVHlwZVNldCkgVG9JbnRlcmZhY2VTbGljZSgpIFtdaW50ZXJmYWNle30KZnVuYyAoc2V0ICpUeXBlU2V0KSBDbG9uZSgpICpUeXBlU2V0CmZ1bmMgKHNldCAqVHlwZVNldCkgSXNFbXB0eSgpIGJvb2wKZnVuYyAoc2V0ICpUeXBlU2V0KSBOb25FbXB0eSgpIGJvb2wKZnVuYyAoc2V0ICpUeXBlU2V0KSBTaXplKCkgaW50CmZ1bmMgKHNldCAqVHlwZVNldCkgQ2FyZGluYWxpdHkoKSBpbnQKZnVuYyAoc2V0ICpUeXBlU2V0KSBBZGQobW9yZSAuLi5UeXBlKSAqVHlwZVNldApmdW5jIChzZXQgKlR5cGVTZXQpIENvbnRhaW5zKGkgVHlwZSkgYm9vbApmdW5jIChzZXQgKlR5cGVTZXQpIENvbnRhaW5zQWxsKGkgLi4uVHlwZSkgYm9vbApmdW5jIChzZXQgKlR5cGVTZXQpIFVuaW9uKG90aGVyICpUeXBlU2V0KSAqVHlwZVNldApmdW5jIChzZXQgKlR5cGVTZXQpIEludGVyc2VjdChvdGhlciAqVHlwZVNldCkgKlR5cGVTZXQKZnVuYyAoc2V0ICpUeXBlU2V0KSBEaWZmZXJlbmNlKG90aGVyICpUeXBlU2V0KSAqVHlwZVNldApmdW5jIChzZXQgKlR5cGVTZXQpIFN5bW1ldHJpY0RpZmZlcmVuY2Uob3RoZXIgKlR5cGVTZXQpICpUeXBlU2V0CmZ1bmMgKHNldCAqVHlwZVNldCkgUmVtb3ZlKGkgVHlwZSkgKlR5cGVTZXQKZnVuYyAoc2V0ICpUeXBlU2V0KSBTZW5kKCkgPC1jaGFuIFR5cGUKZnVuYyAoc2V0ICpUeXBlU2V0KSBGb3JhbGwocCBmdW5jKFR5cGUpIGJvb2wpIGJvb2wKZnVuYyAoc2V0ICpUeXBlU2V0KSBFeGlzdHMocCBmdW5jKFR5cGUpIGJvb2wpIGJvb2wKZnVuYyAoc2V0ICpUeXBlU2V0KSBGb3JlYWNoKGYgZnVuYyhUeXBlKSkKZnVuYyAoc2V0ICpUeXBlU2V0KSBGaW5kKHAgZnVuYyhUeXBlKSBib29sKSAoVHlwZSwgYm9vbCkKZnVuYyAoc2V0ICpUeXBlU2V0KSBGaWx0ZXIocCBmdW5jKFR5cGUpIGJvb2wpICpUeXBlU2V0CmZ1bmMgKHNldCAqVHlwZVNldCkgUGFydGl0aW9uKHAgZnVuYyhUeXBlKSBib29sKSAoKlR5cGVTZXQsICpUeXBlU2V0KQpmdW5jIChzZXQgKlR5cGVTZXQpIE1hcChmIGZ1bmMoVHlwZSkgVHlwZSkgKlR5cGVTZXQKZnVuYyAoc2V0ICpUeXBlU2V0KSBGbGF0TWFwKGYgZnVuYyhUeXBlKSBbXVR5cGUpICpUeXBlU2V0CmZ1bmMgKHNldCAqVHlwZVNldCkgQ291bnRCeShwIGZ1bmMoVHlwZSkgYm9vbCkgKHJlc3VsdCBpbnQpCmZ1bmMgKHNldCAqVHlwZVNldCkgTWluKCkgVHlwZQpmdW5jIChzZXQgKlR5cGVTZXQpIE1heCgpIChyZXN1bHQgVHlwZSkKZnVuYyAoc2V0ICpUeXBlU2V0KSBNaW5CeShsZXNzIGZ1bmMoVHlwZSwgVHlwZSkgYm9vbCkgVHlwZQpmdW5jIChzZXQgKlR5cGVTZXQpIE1heEJ5KGxlc3MgZnVuYyhUeXBlLCBUeXBlKSBib29sKSBUeXBlCmZ1bmMgKHNldCAqVHlwZVNldCkgU3VtKCkgVHlwZQpmdW5jIChzZXQgKlR5cGVTZXQpIFN0cmluZ0xpc3QoKSBbXXN0cmluZwpmdW5jIChzZXQgKlR5cGVTZXQpIFN0cmluZygpIHN0cmluZwpmdW5jIChzZXQgKlR5cGVTZXQpIE1rU3RyaW5nKHNlcCBzdHJpbmcpIHN0cmluZwpmdW5jIChzZXQgKlR5cGVTZXQpIE1rU3RyaW5nMyhiZWZvcmUsIGJldHdlZW4sIGFmdGVyIHN0cmluZykgc3RyaW5nCmZ1bmMgKHNldCAqVHlwZVNldCkgVW5tYXJzaGFsSlNPTihiIFtdYnl0ZSkgZXJyb3IKZnVuYyAoc2V0ICpUeXBlU2V0KSBNYXJzaGFsSlNPTigpIChbXWJ5dGUsIGVycm9yKQpmdW5jIChzZXQgKlR5cGVTZXQpIFN0cmluZ01hcCgpIG1hcFtzdHJpbmddYm9vbApmdW5jIChzZXQgKlR5cGVTZXQpIEdvYkRlY29kZShiIFtdYnl0ZSkgZXJyb3IKZnVuYyAoc2V0IFR5cGVTZXQpIEdvYkVuY29kZSgpIChbXWJ5dGUsIGVycm9yKQo=\"")
		packr.PackJSONBytes("builtin", "plumbing/mapTo.tpl", "\"Ly8gR2VuZXJhdGVkIGZyb20ge3suVGVtcGxhdGVGaWxlfX0gd2l0aCBUeXBlPXt7LlR5cGV9fSBUb1R5cGU9e3suVG9UeXBlfX0KLy8gYnkgcnVudGVtcGxhdGUge3suQXBwVmVyc2lvbn19Ci8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vam9oYW5icmFuZGhvcnN0L3J1bnRlbXBsYXRlL2Jsb2IvbWFzdGVyL0JVSUxUSU4ubWQKCnBhY2thZ2Uge3suUGFja2FnZX19Cgp7e2lmIC5IYXNJbXBvcnR9fQppbXBvcnQgKAoJe3suSW1wb3J0fX0KKQoKe3tlbmQgLX19Ci8vIHt7LlByZWZpeC5VfX17ey5UeXBlLlV9fU1hcFRve3suVG9QcmVmaXguVX19e3suVG9UeXBlLlV9fSB0cmFuc2Zvcm1zIGEgc3RyZWFtIG9mIHt7LlR5cGUuTmFtZX19IHRvIGEgc3RyZWFtIG9mIHt7LlRvVHlwZS5OYW1lfX0uCi8vIFdoZW4gdGhlIHNlbmRlciBjbG9zZXMgdGhlIGlucHV0IGNoYW5uZWwsIHRoZSBvdXRwdXQgY2hhbm5lbCBpcyBjbG9zZWQgdGhlbiB0aGUgZnVuY3Rpb24gdGVybWluYXRlcy4KZnVuYyB7ey5QcmVmaXguVX19e3suVHlwZS5VfX1NYXBUb3t7LlRvUHJlZml4LlV9fXt7LlRvVHlwZS5VfX0oaW4gPC1jaGFuIHt7LlR5cGV9fSwgb3V0IGNoYW48LSB7ey5Ub1R5cGV9fSwgZm4gZnVuYyh7ey5UeXBlfX0pIHt7LlRvVHlwZX19KSB7Cglmb3IgdiA6PSByYW5nZSBpbiB7CgkJb3V0IDwtIGZuKHYpCgl9CgljbG9zZShvdXQpCn0KCi8vIHt7LlByZWZpeC5VfX17ey5UeXBlLlV9fUZsYXRNYXBUb3t7LlRvUHJlZml4LlV9fXt7LlRvVHlwZS5VfX0gdHJhbnNmb3JtcyBhIHN0cmVhbSBvZiB7ey5UeXBlLk5hbWV9fSB0byBhIHN0cmVhbSBvZiB7ey5Ub1R5cGUuTmFtZX19LgovLyBXaGVuIHRoZSBzZW5kZXIgY2xvc2VzIHRoZSBpbnB1dCBjaGFubmVsLCB0aGUgb3V0cHV0IGNoYW5uZWwgaXMgY2xvc2VkIHRoZW4gdGhlIGZ1bmN0aW9uIHRlcm1pbmF0ZXMuCmZ1bmMge3suUHJlZml4LlV9fXt7LlR5cGUuVX19RmxhdE1hcFRve3suVG9QcmVmaXguVX19e3suVG9UeXBlLlV9fShpbiA8LWNoYW4ge3suVHlwZX19LCBvdXQgY2hhbjwtIHt7LlRvVHlwZX19LCBmbiBmdW5jKHt7LlR5cGV9fSkge3suVG9QcmVmaXguVX19e3suVG9UeXBlLlV9fUNvbGxlY3Rpb24pIHsKCWZvciB2aSA6PSByYW5nZSBpbiB7CgkJYyA6PSBmbih2aSkKCQlpZiBjLk5vbkVtcHR5KCkgewoJCQlmb3Igdm8gOj0gcmFuZ2UgYy5TZW5kKCkgewoJCQkJb3V0IDwtIHZvCgkJCX0KCQl9Cgl9CgljbG9zZShvdXQpCn0K\"")
		packr.PackJSONBytes("builtin", "plumbing/plumbing.tpl", "\"\"")
		packr.PackJSONBytes("builtin", "simple/collection.tpl", "\"Ly8gR2VuZXJhdGVkIGZyb20ge3suVGVtcGxhdGVGaWxlfX0gd2l0aCBUeXBlPXt7LlR5cGV9fQovLyBvcHRpb25zOiBDb21wYXJhYmxlOnt7LkNvbXBhcmFibGV9fSBOdW1lcmljOnt7Lk51bWVyaWN9fSBPcmRlcmVkOnt7Lk9yZGVyZWR9fSBTdHJpbmdlcjp7ey5TdHJpbmdlcn19IE11dGFibGU6YWx3YXlzCi8vIGJ5IHJ1bnRlbXBsYXRlIHt7LkFwcFZlcnNpb259fQovLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2pvaGFuYnJhbmRob3JzdC9ydW50ZW1wbGF0ZS9ibG9iL21hc3Rlci9CVUlMVElOLm1kCgpwYWNrYWdlIHt7LlBhY2thZ2V9fQoKe3tpZiAuSGFzSW1wb3J0fX0KaW1wb3J0ICgKCXt7LkltcG9ydH19CikKCnt7ZW5kIC19fQovLyB7ey5QcmVmaXguVX19e3suVHlwZS5VfX1TaXplciBkZWZpbmVzIGFuIGludGVyZmFjZSBmb3Igc2l6aW5nIG1ldGhvZHMgb24ge3suVHlwZX19IGNvbGxlY3Rpb25zLgp0eXBlIHt7LlByZWZpeC5VfX17ey5UeXBlLlV9fVNpemVyIGludGVyZmFjZSB7CgkvLyBJc0VtcHR5IHRlc3RzIHdoZXRoZXIge3suUHJlZml4LlV9fXt7LlR5cGUuVX19Q29sbGVjdGlvbiBpcyBlbXB0eS4KCUlzRW1wdHkoKSBib29sCgoJLy8gTm9uRW1wdHkgdGVzdHMgd2hldGhlciB7ey5QcmVmaXguVX19e3suVHlwZS5VfX1Db2xsZWN0aW9uIGlzIGVtcHR5LgoJTm9uRW1wdHkoKSBib29sCgoJLy8gU2l6ZSByZXR1cm5zIHRoZSBudW1iZXIgb2YgaXRlbXMgaW4gdGhlIGxpc3QgLSBhbiBhbGlhcyBvZiBMZW4oKS4KCVNpemUoKSBpbnQKfQp7ey0gaWYgLlN0cmluZ2VyfX0KCi8vIHt7LlByZWZpeC5VfX17ey5UeXBlLlV9fU1rU3RyaW5nZXIgZGVmaW5lcyBhbiBpbnRlcmZhY2UgZm9yIHN0cmluZ2VyIG1ldGhvZHMgb24ge3suVHlwZX19IGNvbGxlY3Rpb25zLgp0eXBlIHt7LlByZWZpeC5VfX17ey5UeXBlLlV9fU1rU3RyaW5nZXIgaW50ZXJmYWNlIHsKCS8vIFN0cmluZyBpbXBsZW1lbnRzIHRoZSBTdHJpbmdlciBpbnRlcmZhY2UgdG8gcmVuZGVyIHRoZSBsaXN0IGFzIGEgY29tbWEtc2VwYXJhdGVkIHN0cmluZyBlbmNsb3NlZAoJLy8gaW4gc3F1YXJlIGJyYWNrZXRzLgoJU3RyaW5nKCkgc3RyaW5nCgoJLy8gTWtTdHJpbmcgY29uY2F0ZW5hdGVzIHRoZSB2YWx1ZXMgYXMgYSBzdHJpbmcgdXNpbmcgYSBzdXBwbGllZCBzZXBhcmF0b3IuIE5vIGVuY2xvc2luZyBtYXJrcyBhcmUgYWRkZWQuCglNa1N0cmluZyhzZXAgc3RyaW5nKSBzdHJpbmcKCgkvLyBNa1N0cmluZzMgY29uY2F0ZW5hdGVzIHRoZSB2YWx1ZXMgYXMgYSBzdHJpbmcsIHVzaW5nIHRoZSBwcmVmaXgsIHNlcGFyYXRvciBhbmQgc3VmZml4IHN1cHBsaWVkLgoJTWtTdHJpbmczKGJlZm9yZSwgYmV0d2VlbiwgYWZ0ZXIgc3RyaW5nKSBzdHJpbmcKCgkvLyBpbXBsZW1lbnRzIGpzb24uTWFyc2hhbGVyIGludGVyZmFjZSB7CgkvL01hcnNoYWxKU09OKCkgKFtdYnl0ZSwgZXJyb3IpCgoJLy8gaW1wbGVtZW50cyBqc29uLlVubWFyc2hhbGVyIGludGVyZmFjZSB7CgkvL1VubWFyc2hhbEpTT04oYiBbXWJ5dGUpIGVycm9yCgoJLy8gU3RyaW5nTGlzdCBnZXRzIGEgbGlzdCBvZiBzdHJpbmdzIHRoYXQgZGVwaWN0cyBhbGwgdGhlIGVsZW1lbnRzLgoJU3RyaW5nTGlzdCgpIFtdc3RyaW5nCn0Ke3stIGVuZH19CgovLyB7ey5QcmVmaXguVX19e3suVHlwZS5VfX1Db2xsZWN0aW9uIGRlZmluZXMgYW4gaW50ZXJmYWNlIGZvciBjb21tb24gY29sbGVjdGlvbiBtZXRob2RzIG9uIHt7LlR5cGV9fS4KdHlwZSB7ey5QcmVmaXguVX19e3suVHlwZS5VfX1Db2xsZWN0aW9uIGludGVyZmFjZSB7Cgl7ey5QcmVmaXguVX19e3suVHlwZS5VfX1TaXplcgp7ey0gaWYgLlN0cmluZ2VyfX0KCXt7LlByZWZpeC5VfX17ey5UeXBlLlV9fU1rU3RyaW5nZXIKe3stIGVuZH19CgoJLy8gSXNTZXF1ZW5jZSByZXR1cm5zIHRydWUgZm9yIGxpc3RzIGFuZCBxdWV1ZXMuCglJc1NlcXVlbmNlKCkgYm9vbAoKCS8vIElzU2V0IHJldHVybnMgZmFsc2UgZm9yIGxpc3RzIGFuZCBxdWV1ZXMuCglJc1NldCgpIGJvb2wKe3stIGlmIC5Ub0xpc3R9fQoKCS8vIFRvTGlzdCByZXR1cm5zIGEgc2hhbGxvdyBjb3B5IGFzIGEgbGlzdC4KCVRvTGlzdCgpIHt7LlByZWZpeC5VfX17ey5UeXBlLlV9fUxpc3QKe3stIGVuZH19Cnt7LSBpZiAuVG9TZXR9fQoKCS8vIFRvU2V0IHJldHVybnMgYSBzaGFsbG93IGNvcHkgYXMgYSBzZXQuCglUb1NldCgpIHt7LlByZWZpeC5VfX17ey5UeXBlLlV9fVNldAp7ey0gZW5kfX0KCgkvLyBUb1NsaWNlIHJldHVybnMgYSBzaGFsbG93IGNvcHkgYXMgYSBwbGFpbiBzbGljZS4KCVRvU2xpY2UoKSBbXXt7LlR5cGV9fQoKCS8vIFRvSW50ZXJmYWNlU2xpY2UgcmV0dXJucyBhIHNoYWxsb3cgY29weSBhcyBhIHNsaWNlIG9mIGFyYml0cmFyeSB0eXBlLgoJVG9JbnRlcmZhY2VTbGljZSgpIFtdaW50ZXJmYWNle30KCgkvLyBFeGlzdHMgdmVyaWZpZXMgdGhhdCBvbmUgb3IgbW9yZSBlbGVtZW50cyBvZiB7ey5QcmVmaXguVX19e3suVHlwZS5VfX1Db2xsZWN0aW9uIHJldHVybiB0cnVlIGZvciB0aGUgcHJlZGljYXRlIHAuCglFeGlzdHMocCBmdW5jKHt7LlR5cGV9fSkgYm9vbCkgYm9vbAoKCS8vIEZvcmFsbCB2ZXJpZmllcyB0aGF0IGFsbCBlbGVtZW50cyBvZiB7ey5QcmVmaXguVX19e3suVHlwZS5VfX1Db2xsZWN0aW9uIHJldHVybiB0cnVlIGZvciB0aGUgcHJlZGljYXRlIHAuCglGb3JhbGwocCBmdW5jKHt7LlR5cGV9fSkgYm9vbCkgYm9vbAoKCS8vIEZvcmVhY2ggaXRlcmF0ZXMgb3ZlciB7ey5QcmVmaXguVX19e3suVHlwZS5VfX1Db2xsZWN0aW9uIGFuZCBleGVjdXRlcyB0aGUgZnVuY3Rpb24gZiBhZ2FpbnN0IGVhY2ggZWxlbWVudC4KCUZvcmVhY2goZiBmdW5jKHt7LlR5cGV9fSkpCgoJLy8gRmluZCByZXR1cm5zIHRoZSBmaXJzdCB7ey5UeXBlLk5hbWV9fSB0aGF0IHJldHVybnMgdHJ1ZSBmb3IgdGhlIHByZWRpY2F0ZSBwLgoJLy8gRmFsc2UgaXMgcmV0dXJuZWQgaWYgbm9uZSBtYXRjaC4KCUZpbmQocCBmdW5jKHt7LlR5cGV9fSkgYm9vbCkgKHt7LlR5cGV9fSwgYm9vbCkKCgkvLyBTZW5kIHJldHVybnMgYSBjaGFubmVsIHRoYXQgd2lsbCBzZW5kIGFsbCB0aGUgZWxlbWVudHMgaW4gb3JkZXIuIENhbiBiZSB1c2VkIHdpdGggdGhlIHBsdW1iaW5nIGNvZGUsIGZvciBleGFtcGxlLgoJLy8gQSBnb3JvdXRpbmUgaXMgY3JlYXRlZCB0byBzZW5kIHRoZSBlbGVtZW50czsgdGhpcyBvbmx5IHRlcm1pbmF0ZXMgd2hlbiBhbGwgdGhlIGVsZW1lbnRzIGhhdmUgYmVlbiBjb25zdW1lZAoJU2VuZCgpIDwtY2hhbiB7ey5UeXBlfX0KCgkvLyBDb3VudEJ5IGdpdmVzIHRoZSBudW1iZXIgZWxlbWVudHMgb2Yge3suUHJlZml4LlV9fXt7LlR5cGUuVX19Q29sbGVjdGlvbiB0aGF0IHJldHVybiB0cnVlIGZvciB0aGUgcHJlZGljYXRlIHAuCglDb3VudEJ5KHAgZnVuYyh7ey5UeXBlfX0pIGJvb2wpIGludAp7ey0gaWYgLkNvbXBhcmFibGV9fQoKCS8vIENvbnRhaW5zIGRldGVybWluZXMgd2hldGhlciBhIGdpdmVuIGl0ZW0gaXMgYWxyZWFkeSBpbiB0aGUgY29sbGVjdGlvbiwgcmV0dXJuaW5nIHRydWUgaWYgc28uCglDb250YWlucyh2IHt7LlR5cGV9fSkgYm9vbAoKCS8vIENvbnRhaW5zQWxsIGRldGVybWluZXMgd2hldGhlciB0aGUgZ2l2ZW4gaXRlbXMgYXJlIGFsbCBpbiB0aGUgY29sbGVjdGlvbiwgcmV0dXJuaW5nIHRydWUgaWYgc28uCglDb250YWluc0FsbCh2IC4uLnt7LlR5cGV9fSkgYm9vbAp7ey0gZW5kfX0KCgkvLyBBZGQgYWRkcyBpdGVtcyB0byB0aGUgY3VycmVudCBjb2xsZWN0aW9uLgoJLy9BZGQobW9yZSAuLi57ey5UeXBlLk5hbWV9fSkKe3stIGlmIC5PcmRlcmVkfX0KCgkvLyBNaW4gcmV0dXJucyB0aGUgbWluaW11bSB2YWx1ZSBvZiBhbGwgdGhlIGl0ZW1zIGluIHRoZSBjb2xsZWN0aW9uLiBQYW5pY3MgaWYgdGhlcmUgYXJlIG5vIGVsZW1lbnRzLgoJTWluKCkge3suVHlwZS5OYW1lfX0KCgkvLyBNYXggcmV0dXJucyB0aGUgbWluaW11bSB2YWx1ZSBvZiBhbGwgdGhlIGl0ZW1zIGluIHRoZSBjb2xsZWN0aW9uLiBQYW5pY3MgaWYgdGhlcmUgYXJlIG5vIGVsZW1lbnRzLgoJTWF4KCkge3suVHlwZS5OYW1lfX0Ke3stIGVuZH19CgoJLy8gTWluQnkgcmV0dXJucyBhbiBlbGVtZW50IG9mIHt7LlByZWZpeC5VfX17ey5UeXBlLlV9fUNvbGxlY3Rpb24gY29udGFpbmluZyB0aGUgbWluaW11bSB2YWx1ZSwgd2hlbiBjb21wYXJlZCB0byBvdGhlciBlbGVtZW50cwoJLy8gdXNpbmcgYSBwYXNzZWQgZnVuYyBkZWZpbmluZyDigJhsZXNz4oCZLiBJbiB0aGUgY2FzZSBvZiBtdWx0aXBsZSBpdGVtcyBiZWluZyBlcXVhbGx5IG1pbmltYWwsIHRoZSBmaXJzdCBzdWNoCgkvLyBlbGVtZW50IGlzIHJldHVybmVkLiBQYW5pY3MgaWYgdGhlcmUgYXJlIG5vIGVsZW1lbnRzLgoJTWluQnkobGVzcyBmdW5jKHt7LlR5cGV9fSwge3suVHlwZX19KSBib29sKSB7ey5UeXBlfX0KCgkvLyBNYXhCeSByZXR1cm5zIGFuIGVsZW1lbnQgb2Yge3suUHJlZml4LlV9fXt7LlR5cGUuVX19Q29sbGVjdGlvbiBjb250YWluaW5nIHRoZSBtYXhpbXVtIHZhbHVlLCB3aGVuIGNvbXBhcmVkIHRvIG90aGVyIGVsZW1lbnRzCgkvLyB1c2luZyBhIHBhc3NlZCBmdW5jIGRlZmluaW5nIOKAmGxlc3PigJkuIEluIHRoZSBjYXNlIG9mIG11bHRpcGxlIGl0ZW1zIGJlaW5nIGVxdWFsbHkgbWF4aW1hbCwgdGhlIGZpcnN0IHN1Y2gKCS8vIGVsZW1lbnQgaXMgcmV0dXJuZWQuIFBhbmljcyBpZiB0aGVyZSBhcmUgbm8gZWxlbWVudHMuCglNYXhCeShsZXNzIGZ1bmMoe3suVHlwZX19LCB7ey5UeXBlfX0pIGJvb2wpIHt7LlR5cGV9fQp7ey0gaWYgLk51bWVyaWN9fQoKCS8vIFN1bSByZXR1cm5zIHRoZSBzdW0gb2YgYWxsIHRoZSBlbGVtZW50cyBpbiB0aGUgY29sbGVjdGlvbi4KCVN1bSgpIHt7LlR5cGUuTmFtZX19Cnt7LSBlbmR9fQp9Cg==\"")
		packr.PackJSONBytes("builtin", "simple/list.tpl", "\"\"")
		packr.PackJSONBytes("builtin", "simple/map.tpl", "\"\"")
		packr.PackJSONBytes("builtin", "simple/set.tpl", "\"\"")
		packr.PackJSONBytes("builtin", "simple-list-api.txt", "\"ZnVuYyBNYWtlVHlwZUxpc3QobGVuZ3RoLCBjYXBhY2l0eSBpbnQpIFR5cGVMaXN0CmZ1bmMgTmV3VHlwZUxpc3QodmFsdWVzIC4uLlR5cGUpIFR5cGVMaXN0CmZ1bmMgQ29udmVydFR5cGVMaXN0KHZhbHVlcyAuLi5pbnRlcmZhY2V7fSkgKFR5cGVMaXN0LCBib29sKQpmdW5jIEJ1aWxkVHlwZUxpc3RGcm9tQ2hhbihzb3VyY2UgPC1jaGFuIFR5cGUpIFR5cGVMaXN0CmZ1bmMgKGxpc3QgVHlwZUxpc3QpIElzU2VxdWVuY2UoKSBib29sCmZ1bmMgKGxpc3QgVHlwZUxpc3QpIElzU2V0KCkgYm9vbApmdW5jIChsaXN0IFR5cGVMaXN0KSBUb0xpc3QoKSBUeXBlTGlzdApmdW5jIChsaXN0IFR5cGVMaXN0KSBUb1NldCgpIFR5cGVTZXQKZnVuYyAobGlzdCBUeXBlTGlzdCkgVG9TbGljZSgpIFtdVHlwZQpmdW5jIChsaXN0IFR5cGVMaXN0KSBUb0ludGVyZmFjZVNsaWNlKCkgW11pbnRlcmZhY2V7fQpmdW5jIChsaXN0IFR5cGVMaXN0KSBDbG9uZSgpIFR5cGVMaXN0CmZ1bmMgKGxpc3QgVHlwZUxpc3QpIEdldChpIGludCkgVHlwZQpmdW5jIChsaXN0IFR5cGVMaXN0KSBIZWFkKCkgVHlwZQpmdW5jIChsaXN0IFR5cGVMaXN0KSBIZWFkT3B0aW9uKCkgVHlwZQpmdW5jIChsaXN0IFR5cGVMaXN0KSBMYXN0KCkgVHlwZQpmdW5jIChsaXN0IFR5cGVMaXN0KSBMYXN0T3B0aW9uKCkgVHlwZQpmdW5jIChsaXN0IFR5cGVMaXN0KSBUYWlsKCkgVHlwZUxpc3QKZnVuYyAobGlzdCBUeXBlTGlzdCkgSW5pdCgpIFR5cGVMaXN0CmZ1bmMgKGxpc3QgVHlwZUxpc3QpIElzRW1wdHkoKSBib29sCmZ1bmMgKGxpc3QgVHlwZUxpc3QpIE5vbkVtcHR5KCkgYm9vbApmdW5jIChsaXN0IFR5cGVMaXN0KSBTaXplKCkgaW50CmZ1bmMgKGxpc3QgVHlwZUxpc3QpIExlbigpIGludApmdW5jIChsaXN0IFR5cGVMaXN0KSBTd2FwKGksIGogaW50KQpmdW5jIChsaXN0IFR5cGVMaXN0KSBDb250YWlucyh2IFR5cGUpIGJvb2wKZnVuYyAobGlzdCBUeXBlTGlzdCkgQ29udGFpbnNBbGwoaSAuLi5UeXBlKSBib29sCmZ1bmMgKGxpc3QgVHlwZUxpc3QpIEV4aXN0cyhwIGZ1bmMoVHlwZSkgYm9vbCkgYm9vbApmdW5jIChsaXN0IFR5cGVMaXN0KSBGb3JhbGwocCBmdW5jKFR5cGUpIGJvb2wpIGJvb2wKZnVuYyAobGlzdCBUeXBlTGlzdCkgRm9yZWFjaChmIGZ1bmMoVHlwZSkpCmZ1bmMgKGxpc3QgVHlwZUxpc3QpIFNlbmQoKSA8LWNoYW4gVHlwZQpmdW5jIChsaXN0IFR5cGVMaXN0KSBSZXZlcnNlKCkgVHlwZUxpc3QKZnVuYyAobGlzdCBUeXBlTGlzdCkgRG9SZXZlcnNlKCkgVHlwZUxpc3QKZnVuYyAobGlzdCBUeXBlTGlzdCkgU2h1ZmZsZSgpIFR5cGVMaXN0CmZ1bmMgKGxpc3QgVHlwZUxpc3QpIERvU2h1ZmZsZSgpIFR5cGVMaXN0CmZ1bmMgKGxpc3QgVHlwZUxpc3QpIFRha2UobiBpbnQpIFR5cGVMaXN0CmZ1bmMgKGxpc3QgVHlwZUxpc3QpIERyb3AobiBpbnQpIFR5cGVMaXN0CmZ1bmMgKGxpc3QgVHlwZUxpc3QpIFRha2VMYXN0KG4gaW50KSBUeXBlTGlzdApmdW5jIChsaXN0IFR5cGVMaXN0KSBEcm9wTGFzdChuIGludCkgVHlwZUxpc3QKZnVuYyAobGlzdCBUeXBlTGlzdCkgVGFrZVdoaWxlKHAgZnVuYyhUeXBlKSBib29sKSBUeXBlTGlzdApmdW5jIChsaXN0IFR5cGVMaXN0KSBEcm9wV2hpbGUocCBmdW5jKFR5cGUpIGJvb2wpIFR5cGVMaXN0CmZ1bmMgKGxpc3QgVHlwZUxpc3QpIEZpbmQocCBmdW5jKFR5cGUpIGJvb2wpIChUeXBlLCBib29sKQpmdW5jIChsaXN0IFR5cGVMaXN0KSBGaWx0ZXIocCBmdW5jKFR5cGUpIGJvb2wpIFR5cGVMaXN0CmZ1bmMgKGxpc3QgVHlwZUxpc3QpIFBhcnRpdGlvbihwIGZ1bmMoVHlwZSkgYm9vbCkgKFR5cGVMaXN0LCBUeXBlTGlzdCkKZnVuYyAobGlzdCBUeXBlTGlzdCkgTWFwKGYgZnVuYyhUeXBlKSBUeXBlKSBUeXBlTGlzdApmdW5jIChsaXN0IFR5cGVMaXN0KSBGbGF0TWFwKGYgZnVuYyhUeXBlKSBbXVR5cGUpIFR5cGVMaXN0CmZ1bmMgKGxpc3QgVHlwZUxpc3QpIENvdW50QnkocCBmdW5jKFR5cGUpIGJvb2wpIChyZXN1bHQgaW50KQpmdW5jIChsaXN0IFR5cGVMaXN0KSBNaW5CeShsZXNzIGZ1bmMoVHlwZSwgVHlwZSkgYm9vbCkgVHlwZQpmdW5jIChsaXN0IFR5cGVMaXN0KSBNYXhCeShsZXNzIGZ1bmMoVHlwZSwgVHlwZSkgYm9vbCkgVHlwZQpmdW5jIChsaXN0IFR5cGVMaXN0KSBEaXN0aW5jdEJ5KGVxdWFsIGZ1bmMoVHlwZSwgVHlwZSkgYm9vbCkgVHlwZUxpc3QKZnVuYyAobGlzdCBUeXBlTGlzdCkgSW5kZXhXaGVyZShwIGZ1bmMoVHlwZSkgYm9vbCkgaW50CmZ1bmMgKGxpc3QgVHlwZUxpc3QpIEluZGV4V2hlcmUyKHAgZnVuYyhUeXBlKSBib29sLCBmcm9tIGludCkgaW50CmZ1bmMgKGxpc3QgVHlwZUxpc3QpIExhc3RJbmRleFdoZXJlKHAgZnVuYyhUeXBlKSBib29sKSBpbnQKZnVuYyAobGlzdCBUeXBlTGlzdCkgTGFzdEluZGV4V2hlcmUyKHAgZnVuYyhUeXBlKSBib29sLCBiZWZvcmUgaW50KSBpbnQKZnVuYyAoc2wgc29ydGFibGVUeXBlTGlzdCkgTGVzcyhpLCBqIGludCkgYm9vbApmdW5jIChzbCBzb3J0YWJsZVR5cGVMaXN0KSBMZW4oKSBpbnQKZnVuYyAoc2wgc29ydGFibGVUeXBlTGlzdCkgU3dhcChpLCBqIGludCkKZnVuYyAobGlzdCBUeXBlTGlzdCkgU29ydEJ5KGxlc3MgZnVuYyhpLCBqIFR5cGUpIGJvb2wpIFR5cGVMaXN0CmZ1bmMgKGxpc3QgVHlwZUxpc3QpIFN0YWJsZVNvcnRCeShsZXNzIGZ1bmMoaSwgaiBUeXBlKSBib29sKSBUeXBlTGlzdApmdW5jIChsaXN0IFR5cGVMaXN0KSBTb3J0ZWQoKSBUeXBlTGlzdApmdW5jIChsaXN0IFR5cGVMaXN0KSBTdGFibGVTb3J0ZWQoKSBUeXBlTGlzdApmdW5jIChsaXN0IFR5cGVMaXN0KSBNaW4oKSBUeXBlCmZ1bmMgKGxpc3QgVHlwZUxpc3QpIE1heCgpIChyZXN1bHQgVHlwZSkKZnVuYyAobGlzdCBUeXBlTGlzdCkgU3VtKCkgVHlwZQpmdW5jIChsaXN0IFR5cGVMaXN0KSBTdHJpbmdMaXN0KCkgW11zdHJpbmcKZnVuYyAobGlzdCBUeXBlTGlzdCkgU3RyaW5nKCkgc3RyaW5nCmZ1bmMgKGxpc3QgVHlwZUxpc3QpIE1rU3RyaW5nKHNlcCBzdHJpbmcpIHN0cmluZwpmdW5jIChsaXN0IFR5cGVMaXN0KSBNa1N0cmluZzMoYmVmb3JlLCBiZXR3ZWVuLCBhZnRlciBzdHJpbmcpIHN0cmluZwpmdW5jIChsaXN0IFR5cGVMaXN0KSBHb2JEZWNvZGUoYiBbXWJ5dGUpIGVycm9yCmZ1bmMgKGxpc3QgVHlwZUxpc3QpIEdvYkVuY29kZSgpIChbXWJ5dGUsIGVycm9yKQo=\"")
		packr.PackJSONBytes("builtin", "simple-map-api.txt", "\"ZnVuYyAodHMgS2V5VHlwZVR1cGxlcykgQXBwZW5kMShrIEtleSwgdiBUeXBlKSBLZXlUeXBlVHVwbGVzCmZ1bmMgKHRzIEtleVR5cGVUdXBsZXMpIEFwcGVuZDIoazEgS2V5LCB2MSBUeXBlLCBrMiBLZXksIHYyIFR5cGUpIEtleVR5cGVUdXBsZXMKZnVuYyAodHMgS2V5VHlwZVR1cGxlcykgQXBwZW5kMyhrMSBLZXksIHYxIFR5cGUsIGsyIEtleSwgdjIgVHlwZSwgazMgS2V5LCB2MyBUeXBlKSBLZXlUeXBlVHVwbGVzCmZ1bmMgS2V5VHlwZVppcChrZXlzIC4uLktleSkgS2V5VHlwZVR1cGxlcwpmdW5jICh0cyBLZXlUeXBlVHVwbGVzKSBWYWx1ZXModmFsdWVzIC4uLlR5cGUpIEtleVR5cGVUdXBsZXMKZnVuYyBOZXdLZXlUeXBlTWFwMShrIEtleSwgdiBUeXBlKSBLZXlUeXBlTWFwCmZ1bmMgTmV3S2V5VHlwZU1hcChrdiAuLi5LZXlUeXBlVHVwbGUpIEtleVR5cGVNYXAKZnVuYyAobW0gS2V5VHlwZU1hcCkgS2V5cygpIFtdS2V5CmZ1bmMgKG1tIEtleVR5cGVNYXApIFZhbHVlcygpIFtdVHlwZQpmdW5jIChtbSBLZXlUeXBlTWFwKSBUb1NsaWNlKCkgW11LZXlUeXBlVHVwbGUKZnVuYyAobW0gS2V5VHlwZU1hcCkgR2V0KGsgS2V5KSAoVHlwZSwgYm9vbCkKZnVuYyAobW0gS2V5VHlwZU1hcCkgUHV0KGsgS2V5LCB2IFR5cGUpIGJvb2wKZnVuYyAobW0gS2V5VHlwZU1hcCkgQ29udGFpbnNLZXkoayBLZXkpIGJvb2wKZnVuYyAobW0gS2V5VHlwZU1hcCkgQ29udGFpbnNBbGxLZXlzKGtrIC4uLktleSkgYm9vbApmdW5jIChtbSAqS2V5VHlwZU1hcCkgQ2xlYXIoKQpmdW5jIChtbSBLZXlUeXBlTWFwKSBSZW1vdmUoayBLZXkpCmZ1bmMgKG1tIEtleVR5cGVNYXApIFBvcChrIEtleSkgKFR5cGUsIGJvb2wpCmZ1bmMgKG1tIEtleVR5cGVNYXApIFNpemUoKSBpbnQKZnVuYyAobW0gS2V5VHlwZU1hcCkgSXNFbXB0eSgpIGJvb2wKZnVuYyAobW0gS2V5VHlwZU1hcCkgTm9uRW1wdHkoKSBib29sCmZ1bmMgKG1tIEtleVR5cGVNYXApIERyb3BXaGVyZShmbiBmdW5jKEtleSwgVHlwZSkgYm9vbCkgS2V5VHlwZVR1cGxlcwpmdW5jIChtbSBLZXlUeXBlTWFwKSBGb3JlYWNoKGYgZnVuYyhLZXksIFR5cGUpKQpmdW5jIChtbSBLZXlUeXBlTWFwKSBGb3JhbGwocCBmdW5jKEtleSwgVHlwZSkgYm9vbCkgYm9vbApmdW5jIChtbSBLZXlUeXBlTWFwKSBFeGlzdHMocCBmdW5jKEtleSwgVHlwZSkgYm9vbCkgYm9vbApmdW5jIChtbSBLZXlUeXBlTWFwKSBGaW5kKHAgZnVuYyhLZXksIFR5cGUpIGJvb2wpIChLZXlUeXBlVHVwbGUsIGJvb2wpCmZ1bmMgKG1tIEtleVR5cGVNYXApIEZpbHRlcihwIGZ1bmMoS2V5LCBUeXBlKSBib29sKSBLZXlUeXBlTWFwCmZ1bmMgKG1tIEtleVR5cGVNYXApIFBhcnRpdGlvbihwIGZ1bmMoS2V5LCBUeXBlKSBib29sKSAobWF0Y2hpbmcgS2V5VHlwZU1hcCwgb3RoZXJzIEtleVR5cGVNYXApCmZ1bmMgKG1tIEtleVR5cGVNYXApIE1hcChmIGZ1bmMoS2V5LCBUeXBlKSAoS2V5LCBUeXBlKSkgS2V5VHlwZU1hcApmdW5jIChtbSBLZXlUeXBlTWFwKSBGbGF0TWFwKGYgZnVuYyhLZXksIFR5cGUpIFtdS2V5VHlwZVR1cGxlKSBLZXlUeXBlTWFwCmZ1bmMgKG1tIEtleVR5cGVNYXApIENsb25lKCkgS2V5VHlwZU1hcApmdW5jIChtbSBLZXlUeXBlTWFwKSBTdHJpbmcoKSBzdHJpbmcKZnVuYyAobW0gS2V5VHlwZU1hcCkgTWtTdHJpbmcoc2VwIHN0cmluZykgc3RyaW5nCmZ1bmMgKG1tIEtleVR5cGVNYXApIE1rU3RyaW5nMyhiZWZvcmUsIGJldHdlZW4sIGFmdGVyIHN0cmluZykgc3RyaW5nCg==\"")
		packr.PackJSONBytes("builtin", "simple-plist-api.txt", "\"ZnVuYyBNYWtlVHlwZUxpc3QobGVuZ3RoLCBjYXBhY2l0eSBpbnQpIFR5cGVMaXN0CmZ1bmMgTmV3VHlwZUxpc3QodmFsdWVzIC4uLipUeXBlKSBUeXBlTGlzdApmdW5jIENvbnZlcnRUeXBlTGlzdCh2YWx1ZXMgLi4uaW50ZXJmYWNle30pIChUeXBlTGlzdCwgYm9vbCkKZnVuYyBCdWlsZFR5cGVMaXN0RnJvbUNoYW4oc291cmNlIDwtY2hhbiAqVHlwZSkgVHlwZUxpc3QKZnVuYyAobGlzdCBUeXBlTGlzdCkgSXNTZXF1ZW5jZSgpIGJvb2wKZnVuYyAobGlzdCBUeXBlTGlzdCkgSXNTZXQoKSBib29sCmZ1bmMgKGxpc3QgVHlwZUxpc3QpIFRvTGlzdCgpIFR5cGVMaXN0CmZ1bmMgKGxpc3QgVHlwZUxpc3QpIFRvU2V0KCkgVHlwZVNldApmdW5jIChsaXN0IFR5cGVMaXN0KSBUb1NsaWNlKCkgW10qVHlwZQpmdW5jIChsaXN0IFR5cGVMaXN0KSBUb0ludGVyZmFjZVNsaWNlKCkgW11pbnRlcmZhY2V7fQpmdW5jIChsaXN0IFR5cGVMaXN0KSBDbG9uZSgpIFR5cGVMaXN0CmZ1bmMgKGxpc3QgVHlwZUxpc3QpIEdldChpIGludCkgKlR5cGUKZnVuYyAobGlzdCBUeXBlTGlzdCkgSGVhZCgpICpUeXBlCmZ1bmMgKGxpc3QgVHlwZUxpc3QpIEhlYWRPcHRpb24oKSAqVHlwZQpmdW5jIChsaXN0IFR5cGVMaXN0KSBMYXN0KCkgKlR5cGUKZnVuYyAobGlzdCBUeXBlTGlzdCkgTGFzdE9wdGlvbigpICpUeXBlCmZ1bmMgKGxpc3QgVHlwZUxpc3QpIFRhaWwoKSBUeXBlTGlzdApmdW5jIChsaXN0IFR5cGVMaXN0KSBJbml0KCkgVHlwZUxpc3QKZnVuYyAobGlzdCBUeXBlTGlzdCkgSXNFbXB0eSgpIGJvb2wKZnVuYyAobGlzdCBUeXBlTGlzdCkgTm9uRW1wdHkoKSBib29sCmZ1bmMgKGxpc3QgVHlwZUxpc3QpIFNpemUoKSBpbnQKZnVuYyAobGlzdCBUeXBlTGlzdCkgTGVuKCkgaW50CmZ1bmMgKGxpc3QgVHlwZUxpc3QpIFN3YXAoaSwgaiBpbnQpCmZ1bmMgKGxpc3QgVHlwZUxpc3QpIENvbnRhaW5zKHYgKlR5cGUpIGJvb2wKZnVuYyAobGlzdCBUeXBlTGlzdCkgQ29udGFpbnNBbGwoaSAuLi4qVHlwZSkgYm9vbApmdW5jIChsaXN0IFR5cGVMaXN0KSBFeGlzdHMocCBmdW5jKCpUeXBlKSBib29sKSBib29sCmZ1bmMgKGxpc3QgVHlwZUxpc3QpIEZvcmFsbChwIGZ1bmMoKlR5cGUpIGJvb2wpIGJvb2wKZnVuYyAobGlzdCBUeXBlTGlzdCkgRm9yZWFjaChmIGZ1bmMoKlR5cGUpKQpmdW5jIChsaXN0IFR5cGVMaXN0KSBTZW5kKCkgPC1jaGFuICpUeXBlCmZ1bmMgKGxpc3QgVHlwZUxpc3QpIFJldmVyc2UoKSBUeXBlTGlzdApmdW5jIChsaXN0IFR5cGVMaXN0KSBEb1JldmVyc2UoKSBUeXBlTGlzdApmdW5jIChsaXN0IFR5cGVMaXN0KSBTaHVmZmxlKCkgVHlwZUxpc3QKZnVuYyAobGlzdCBUeXBlTGlzdCkgRG9TaHVmZmxlKCkgVHlwZUxpc3QKZnVuYyAobGlzdCBUeXBlTGlzdCkgVGFrZShuIGludCkgVHlwZUxpc3QKZnVuYyAobGlzdCBUeXBlTGlzdCkgRHJvcChuIGludCkgVHlwZUxpc3QKZnVuYyAobGlzdCBUeXBlTGlzdCkgVGFrZUxhc3QobiBpbnQpIFR5cGVMaXN0CmZ1bmMgKGxpc3QgVHlwZUxpc3QpIERyb3BMYXN0KG4gaW50KSBUeXBlTGlzdApmdW5jIChsaXN0IFR5cGVMaXN0KSBUYWtlV2hpbGUocCBmdW5jKCpUeXBlKSBib29sKSBUeXBlTGlzdApmdW5jIChsaXN0IFR5cGVMaXN0KSBEcm9wV2hpbGUocCBmdW5jKCpUeXBlKSBib29sKSBUeXBlTGlzdApmdW5jIChsaXN0IFR5cGVMaXN0KSBGaW5kKHAgZnVuYygqVHlwZSkgYm9vbCkgKCpUeXBlLCBib29sKQpmdW5jIChsaXN0IFR5cGVMaXN0KSBGaWx0ZXIocCBmdW5jKCpUeXBlKSBib29sKSBUeXBlTGlzdApmdW5jIChsaXN0IFR5cGVMaXN0KSBQYXJ0aXRpb24ocCBmdW5jKCpUeXBlKSBib29sKSAoVHlwZUxpc3QsIFR5cGVMaXN0KQpmdW5jIChsaXN0IFR5cGVMaXN0KSBNYXAoZiBmdW5jKCpUeXBlKSAqVHlwZSkgVHlwZUxpc3QKZnVuYyAobGlzdCBUeXBlTGlzdCkgRmxhdE1hcChmIGZ1bmMoKlR5cGUpIFtdKlR5cGUpIFR5cGVMaXN0CmZ1bmMgKGxpc3QgVHlwZUxpc3QpIENvdW50QnkocCBmdW5jKCpUeXBlKSBib29sKSAocmVzdWx0IGludCkKZnVuYyAobGlzdCBUeXBlTGlzdCkgTWluQnkobGVzcyBmdW5jKCpUeXBlLCAqVHlwZSkgYm9vbCkgKlR5cGUKZnVuYyAobGlzdCBUeXBlTGlzdCkgTWF4QnkobGVzcyBmdW5jKCpUeXBlLCAqVHlwZSkgYm9vbCkgKlR5cGUKZnVuYyAobGlzdCBUeXBlTGlzdCkgRGlzdGluY3RCeShlcXVhbCBmdW5jKCpUeXBlLCAqVHlwZSkgYm9vbCkgVHlwZUxpc3QKZnVuYyAobGlzdCBUeXBlTGlzdCkgSW5kZXhXaGVyZShwIGZ1bmMoKlR5cGUpIGJvb2wpIGludApmdW5jIChsaXN0IFR5cGVMaXN0KSBJbmRleFdoZXJlMihwIGZ1bmMoKlR5cGUpIGJvb2wsIGZyb20gaW50KSBpbnQKZnVuYyAobGlzdCBUeXBlTGlzdCkgTGFzdEluZGV4V2hlcmUocCBmdW5jKCpUeXBlKSBib29sKSBpbnQKZnVuYyAobGlzdCBUeXBlTGlzdCkgTGFzdEluZGV4V2hlcmUyKHAgZnVuYygqVHlwZSkgYm9vbCwgYmVmb3JlIGludCkgaW50CmZ1bmMgKHNsIHNvcnRhYmxlVHlwZUxpc3QpIExlc3MoaSwgaiBpbnQpIGJvb2wKZnVuYyAoc2wgc29ydGFibGVUeXBlTGlzdCkgTGVuKCkgaW50CmZ1bmMgKHNsIHNvcnRhYmxlVHlwZUxpc3QpIFN3YXAoaSwgaiBpbnQpCmZ1bmMgKGxpc3QgVHlwZUxpc3QpIFNvcnRCeShsZXNzIGZ1bmMoaSwgaiAqVHlwZSkgYm9vbCkgVHlwZUxpc3QKZnVuYyAobGlzdCBUeXBlTGlzdCkgU3RhYmxlU29ydEJ5KGxlc3MgZnVuYyhpLCBqICpUeXBlKSBib29sKSBUeXBlTGlzdApmdW5jIChsaXN0IFR5cGVMaXN0KSBTb3J0ZWQoKSBUeXBlTGlzdApmdW5jIChsaXN0IFR5cGVMaXN0KSBTdGFibGVTb3J0ZWQoKSBUeXBlTGlzdApmdW5jIChsaXN0IFR5cGVMaXN0KSBNaW4oKSBUeXBlCmZ1bmMgKGxpc3QgVHlwZUxpc3QpIE1heCgpIChyZXN1bHQgVHlwZSkKZnVuYyAobGlzdCBUeXBlTGlzdCkgU3VtKCkgVHlwZQpmdW5jIChsaXN0IFR5cGVMaXN0KSBTdHJpbmdMaXN0KCkgW11zdHJpbmcKZnVuYyAobGlzdCBUeXBlTGlzdCkgU3RyaW5nKCkgc3RyaW5nCmZ1bmMgKGxpc3QgVHlwZUxpc3QpIE1rU3RyaW5nKHNlcCBzdHJpbmcpIHN0cmluZwpmdW5jIChsaXN0IFR5cGVMaXN0KSBNa1N0cmluZzMoYmVmb3JlLCBiZXR3ZWVuLCBhZnRlciBzdHJpbmcpIHN0cmluZwpmdW5jIChsaXN0IFR5cGVMaXN0KSBHb2JEZWNvZGUoYiBbXWJ5dGUpIGVycm9yCmZ1bmMgKGxpc3QgVHlwZUxpc3QpIEdvYkVuY29kZSgpIChbXWJ5dGUsIGVycm9yKQo=\"")
		packr.PackJSONBytes("builtin", "simple-pmap-api.txt", "\"ZnVuYyAodHMgS2V5VHlwZVR1cGxlcykgQXBwZW5kMShrICpLZXksIHYgKlR5cGUpIEtleVR5cGVUdXBsZXMKZnVuYyAodHMgS2V5VHlwZVR1cGxlcykgQXBwZW5kMihrMSAqS2V5LCB2MSAqVHlwZSwgazIgKktleSwgdjIgKlR5cGUpIEtleVR5cGVUdXBsZXMKZnVuYyAodHMgS2V5VHlwZVR1cGxlcykgQXBwZW5kMyhrMSAqS2V5LCB2MSAqVHlwZSwgazIgKktleSwgdjIgKlR5cGUsIGszICpLZXksIHYzICpUeXBlKSBLZXlUeXBlVHVwbGVzCmZ1bmMgS2V5VHlwZVppcChrZXlzIC4uLipLZXkpIEtleVR5cGVUdXBsZXMKZnVuYyAodHMgS2V5VHlwZVR1cGxlcykgVmFsdWVzKHZhbHVlcyAuLi4qVHlwZSkgS2V5VHlwZVR1cGxlcwpmdW5jIE5ld0tleVR5cGVNYXAxKGsgKktleSwgdiAqVHlwZSkgS2V5VHlwZU1hcApmdW5jIE5ld0tleVR5cGVNYXAoa3YgLi4uS2V5VHlwZVR1cGxlKSBLZXlUeXBlTWFwCmZ1bmMgKG1tIEtleVR5cGVNYXApIEtleXMoKSBbXSpLZXkKZnVuYyAobW0gS2V5VHlwZU1hcCkgVmFsdWVzKCkgW10qVHlwZQpmdW5jIChtbSBLZXlUeXBlTWFwKSBUb1NsaWNlKCkgW11LZXlUeXBlVHVwbGUKZnVuYyAobW0gS2V5VHlwZU1hcCkgR2V0KGsgKktleSkgKCpUeXBlLCBib29sKQpmdW5jIChtbSBLZXlUeXBlTWFwKSBQdXQoayAqS2V5LCB2ICpUeXBlKSBib29sCmZ1bmMgKG1tIEtleVR5cGVNYXApIENvbnRhaW5zS2V5KGsgKktleSkgYm9vbApmdW5jIChtbSBLZXlUeXBlTWFwKSBDb250YWluc0FsbEtleXMoa2sgLi4uKktleSkgYm9vbApmdW5jIChtbSAqS2V5VHlwZU1hcCkgQ2xlYXIoKQpmdW5jIChtbSBLZXlUeXBlTWFwKSBSZW1vdmUoayAqS2V5KQpmdW5jIChtbSBLZXlUeXBlTWFwKSBQb3AoayAqS2V5KSAoKlR5cGUsIGJvb2wpCmZ1bmMgKG1tIEtleVR5cGVNYXApIFNpemUoKSBpbnQKZnVuYyAobW0gS2V5VHlwZU1hcCkgSXNFbXB0eSgpIGJvb2wKZnVuYyAobW0gS2V5VHlwZU1hcCkgTm9uRW1wdHkoKSBib29sCmZ1bmMgKG1tIEtleVR5cGVNYXApIERyb3BXaGVyZShmbiBmdW5jKCpLZXksICpUeXBlKSBib29sKSBLZXlUeXBlVHVwbGVzCmZ1bmMgKG1tIEtleVR5cGVNYXApIEZvcmVhY2goZiBmdW5jKCpLZXksICpUeXBlKSkKZnVuYyAobW0gS2V5VHlwZU1hcCkgRm9yYWxsKHAgZnVuYygqS2V5LCAqVHlwZSkgYm9vbCkgYm9vbApmdW5jIChtbSBLZXlUeXBlTWFwKSBFeGlzdHMocCBmdW5jKCpLZXksICpUeXBlKSBib29sKSBib29sCmZ1bmMgKG1tIEtleVR5cGVNYXApIEZpbmQocCBmdW5jKCpLZXksICpUeXBlKSBib29sKSAoS2V5VHlwZVR1cGxlLCBib29sKQpmdW5jIChtbSBLZXlUeXBlTWFwKSBGaWx0ZXIocCBmdW5jKCpLZXksICpUeXBlKSBib29sKSBLZXlUeXBlTWFwCmZ1bmMgKG1tIEtleVR5cGVNYXApIFBhcnRpdGlvbihwIGZ1bmMoKktleSwgKlR5cGUpIGJvb2wpIChtYXRjaGluZyBLZXlUeXBlTWFwLCBvdGhlcnMgS2V5VHlwZU1hcCkKZnVuYyAobW0gS2V5VHlwZU1hcCkgTWFwKGYgZnVuYygqS2V5LCAqVHlwZSkgKCpLZXksICpUeXBlKSkgS2V5VHlwZU1hcApmdW5jIChtbSBLZXlUeXBlTWFwKSBGbGF0TWFwKGYgZnVuYygqS2V5LCAqVHlwZSkgW11LZXlUeXBlVHVwbGUpIEtleVR5cGVNYXAKZnVuYyAobW0gS2V5VHlwZU1hcCkgQ2xvbmUoKSBLZXlUeXBlTWFwCmZ1bmMgKG1tIEtleVR5cGVNYXApIFN0cmluZygpIHN0cmluZwpmdW5jIChtbSBLZXlUeXBlTWFwKSBNa1N0cmluZyhzZXAgc3RyaW5nKSBzdHJpbmcKZnVuYyAobW0gS2V5VHlwZU1hcCkgTWtTdHJpbmczKGJlZm9yZSwgYmV0d2VlbiwgYWZ0ZXIgc3RyaW5nKSBzdHJpbmcK\"")
		packr.PackJSONBytes("builtin", "simple-pset-api.txt", "\"ZnVuYyBOZXdUeXBlU2V0KHZhbHVlcyAuLi4qVHlwZSkgVHlwZVNldApmdW5jIENvbnZlcnRUeXBlU2V0KHZhbHVlcyAuLi5pbnRlcmZhY2V7fSkgKFR5cGVTZXQsIGJvb2wpCmZ1bmMgQnVpbGRUeXBlU2V0RnJvbUNoYW4oc291cmNlIDwtY2hhbiAqVHlwZSkgVHlwZVNldApmdW5jIChzZXQgVHlwZVNldCkgSXNTZXF1ZW5jZSgpIGJvb2wKZnVuYyAoc2V0IFR5cGVTZXQpIElzU2V0KCkgYm9vbApmdW5jIChzZXQgVHlwZVNldCkgVG9MaXN0KCkgVHlwZUxpc3QKZnVuYyAoc2V0IFR5cGVTZXQpIFRvU2V0KCkgVHlwZVNldApmdW5jIChzZXQgVHlwZVNldCkgVG9TbGljZSgpIFtdKlR5cGUKZnVuYyAoc2V0IFR5cGVTZXQpIFRvSW50ZXJmYWNlU2xpY2UoKSBbXWludGVyZmFjZXt9CmZ1bmMgKHNldCBUeXBlU2V0KSBDbG9uZSgpIFR5cGVTZXQKZnVuYyAoc2V0IFR5cGVTZXQpIElzRW1wdHkoKSBib29sCmZ1bmMgKHNldCBUeXBlU2V0KSBOb25FbXB0eSgpIGJvb2wKZnVuYyAoc2V0IFR5cGVTZXQpIFNpemUoKSBpbnQKZnVuYyAoc2V0IFR5cGVTZXQpIENhcmRpbmFsaXR5KCkgaW50CmZ1bmMgKHNldCBUeXBlU2V0KSBBZGQobW9yZSAuLi4qVHlwZSkgVHlwZVNldApmdW5jIChzZXQgVHlwZVNldCkgQ29udGFpbnMoaSAqVHlwZSkgYm9vbApmdW5jIChzZXQgVHlwZVNldCkgQ29udGFpbnNBbGwoaSAuLi4qVHlwZSkgYm9vbApmdW5jIChzZXQgVHlwZVNldCkgQXBwZW5kKG1vcmUgLi4uVHlwZSkgVHlwZVNldApmdW5jIChzZXQgVHlwZVNldCkgVW5pb24ob3RoZXIgVHlwZVNldCkgVHlwZVNldApmdW5jIChzZXQgVHlwZVNldCkgSW50ZXJzZWN0KG90aGVyIFR5cGVTZXQpIFR5cGVTZXQKZnVuYyAoc2V0IFR5cGVTZXQpIERpZmZlcmVuY2Uob3RoZXIgVHlwZVNldCkgVHlwZVNldApmdW5jIChzZXQgVHlwZVNldCkgU3ltbWV0cmljRGlmZmVyZW5jZShvdGhlciBUeXBlU2V0KSBUeXBlU2V0CmZ1bmMgKHNldCAqVHlwZVNldCkgQ2xlYXIoKQpmdW5jIChzZXQgVHlwZVNldCkgUmVtb3ZlKGkgKlR5cGUpCmZ1bmMgKHNldCBUeXBlU2V0KSBTZW5kKCkgPC1jaGFuICpUeXBlCmZ1bmMgKHNldCBUeXBlU2V0KSBGb3JhbGwocCBmdW5jKCpUeXBlKSBib29sKSBib29sCmZ1bmMgKHNldCBUeXBlU2V0KSBFeGlzdHMocCBmdW5jKCpUeXBlKSBib29sKSBib29sCmZ1bmMgKHNldCBUeXBlU2V0KSBGb3JlYWNoKGYgZnVuYygqVHlwZSkpCmZ1bmMgKHNldCBUeXBlU2V0KSBGaW5kKHAgZnVuYygqVHlwZSkgYm9vbCkgKCpUeXBlLCBib29sKQpmdW5jIChzZXQgVHlwZVNldCkgRmlsdGVyKHAgZnVuYygqVHlwZSkgYm9vbCkgVHlwZVNldApmdW5jIChzZXQgVHlwZVNldCkgUGFydGl0aW9uKHAgZnVuYygqVHlwZSkgYm9vbCkgKFR5cGVTZXQsIFR5cGVTZXQpCmZ1bmMgKHNldCBUeXBlU2V0KSBNYXAoZiBmdW5jKCpUeXBlKSAqVHlwZSkgVHlwZVNldApmdW5jIChzZXQgVHlwZVNldCkgRmxhdE1hcChmIGZ1bmMoKlR5cGUpIFtdKlR5cGUpIFR5cGVTZXQKZnVuYyAoc2V0IFR5cGVTZXQpIENvdW50QnkocCBmdW5jKCpUeXBlKSBib29sKSAocmVzdWx0IGludCkKZnVuYyAoc2V0IFR5cGVTZXQpIE1pbigpIFR5cGUKZnVuYyAoc2V0IFR5cGVTZXQpIE1heCgpIFR5cGUKZnVuYyAoc2V0IFR5cGVTZXQpIE1pbkJ5KGxlc3MgZnVuYygqVHlwZSwgKlR5cGUpIGJvb2wpICpUeXBlCmZ1bmMgKHNldCBUeXBlU2V0KSBNYXhCeShsZXNzIGZ1bmMoKlR5cGUsICpUeXBlKSBib29sKSAqVHlwZQpmdW5jIChzZXQgVHlwZVNldCkgU3VtKCkgVHlwZQpmdW5jIChzZXQgVHlwZVNldCkgU3RyaW5nTGlzdCgpIFtdc3RyaW5nCmZ1bmMgKHNldCBUeXBlU2V0KSBTdHJpbmcoKSBzdHJpbmcKZnVuYyAoc2V0IFR5cGVTZXQpIE1rU3RyaW5nKHNlcCBzdHJpbmcpIHN0cmluZwpmdW5jIChzZXQgVHlwZVNldCkgTWtTdHJpbmczKGJlZm9yZSwgYmV0d2VlbiwgYWZ0ZXIgc3RyaW5nKSBzdHJpbmcKZnVuYyAoc2V0IFR5cGVTZXQpIFVubWFyc2hhbEpTT04oYiBbXWJ5dGUpIGVycm9yCmZ1bmMgKHNldCBUeXBlU2V0KSBNYXJzaGFsSlNPTigpIChbXWJ5dGUsIGVycm9yKQpmdW5jIChzZXQgVHlwZVNldCkgU3RyaW5nTWFwKCkgbWFwW3N0cmluZ11ib29sCg==\"")
		packr.PackJSONBytes("builtin", "simple-set-api.txt", "\"ZnVuYyBOZXdUeXBlU2V0KHZhbHVlcyAuLi5UeXBlKSBUeXBlU2V0CmZ1bmMgQ29udmVydFR5cGVTZXQodmFsdWVzIC4uLmludGVyZmFjZXt9KSAoVHlwZVNldCwgYm9vbCkKZnVuYyBCdWlsZFR5cGVTZXRGcm9tQ2hhbihzb3VyY2UgPC1jaGFuIFR5cGUpIFR5cGVTZXQKZnVuYyAoc2V0IFR5cGVTZXQpIElzU2VxdWVuY2UoKSBib29sCmZ1bmMgKHNldCBUeXBlU2V0KSBJc1NldCgpIGJvb2wKZnVuYyAoc2V0IFR5cGVTZXQpIFRvTGlzdCgpIFR5cGVMaXN0CmZ1bmMgKHNldCBUeXBlU2V0KSBUb1NldCgpIFR5cGVTZXQKZnVuYyAoc2V0IFR5cGVTZXQpIFRvU2xpY2UoKSBbXVR5cGUKZnVuYyAoc2V0IFR5cGVTZXQpIFRvSW50ZXJmYWNlU2xpY2UoKSBbXWludGVyZmFjZXt9CmZ1bmMgKHNldCBUeXBlU2V0KSBDbG9uZSgpIFR5cGVTZXQKZnVuYyAoc2V0IFR5cGVTZXQpIElzRW1wdHkoKSBib29sCmZ1bmMgKHNldCBUeXBlU2V0KSBOb25FbXB0eSgpIGJvb2wKZnVuYyAoc2V0IFR5cGVTZXQpIFNpemUoKSBpbnQKZnVuYyAoc2V0IFR5cGVTZXQpIENhcmRpbmFsaXR5KCkgaW50CmZ1bmMgKHNldCBUeXBlU2V0KSBBZGQobW9yZSAuLi5UeXBlKSBUeXBlU2V0CmZ1bmMgKHNldCBUeXBlU2V0KSBDb250YWlucyhpIFR5cGUpIGJvb2wKZnVuYyAoc2V0IFR5cGVTZXQpIENvbnRhaW5zQWxsKGkgLi4uVHlwZSkgYm9vbApmdW5jIChzZXQgVHlwZVNldCkgQXBwZW5kKG1vcmUgLi4uVHlwZSkgVHlwZVNldApmdW5jIChzZXQgVHlwZVNldCkgVW5pb24ob3RoZXIgVHlwZVNldCkgVHlwZVNldApmdW5jIChzZXQgVHlwZVNldCkgSW50ZXJzZWN0KG90aGVyIFR5cGVTZXQpIFR5cGVTZXQKZnVuYyAoc2V0IFR5cGVTZXQpIERpZmZlcmVuY2Uob3RoZXIgVHlwZVNldCkgVHlwZVNldApmdW5jIChzZXQgVHlwZVNldCkgU3ltbWV0cmljRGlmZmVyZW5jZShvdGhlciBUeXBlU2V0KSBUeXBlU2V0CmZ1bmMgKHNldCAqVHlwZVNldCkgQ2xlYXIoKQpmdW5jIChzZXQgVHlwZVNldCkgUmVtb3ZlKGkgVHlwZSkKZnVuYyAoc2V0IFR5cGVTZXQpIFNlbmQoKSA8LWNoYW4gVHlwZQpmdW5jIChzZXQgVHlwZVNldCkgRm9yYWxsKHAgZnVuYyhUeXBlKSBib29sKSBib29sCmZ1bmMgKHNldCBUeXBlU2V0KSBFeGlzdHMocCBmdW5jKFR5cGUpIGJvb2wpIGJvb2wKZnVuYyAoc2V0IFR5cGVTZXQpIEZvcmVhY2goZiBmdW5jKFR5cGUpKQpmdW5jIChzZXQgVHlwZVNldCkgRmluZChwIGZ1bmMoVHlwZSkgYm9vbCkgKFR5cGUsIGJvb2wpCmZ1bmMgKHNldCBUeXBlU2V0KSBGaWx0ZXIocCBmdW5jKFR5cGUpIGJvb2wpIFR5cGVTZXQKZnVuYyAoc2V0IFR5cGVTZXQpIFBhcnRpdGlvbihwIGZ1bmMoVHlwZSkgYm9vbCkgKFR5cGVTZXQsIFR5cGVTZXQpCmZ1bmMgKHNldCBUeXBlU2V0KSBNYXAoZiBmdW5jKFR5cGUpIFR5cGUpIFR5cGVTZXQKZnVuYyAoc2V0IFR5cGVTZXQpIEZsYXRNYXAoZiBmdW5jKFR5cGUpIFtdVHlwZSkgVHlwZVNldApmdW5jIChzZXQgVHlwZVNldCkgQ291bnRCeShwIGZ1bmMoVHlwZSkgYm9vbCkgKHJlc3VsdCBpbnQpCmZ1bmMgKHNldCBUeXBlU2V0KSBNaW4oKSBUeXBlCmZ1bmMgKHNldCBUeXBlU2V0KSBNYXgoKSBUeXBlCmZ1bmMgKHNldCBUeXBlU2V0KSBNaW5CeShsZXNzIGZ1bmMoVHlwZSwgVHlwZSkgYm9vbCkgVHlwZQpmdW5jIChzZXQgVHlwZVNldCkgTWF4QnkobGVzcyBmdW5jKFR5cGUsIFR5cGUpIGJvb2wpIFR5cGUKZnVuYyAoc2V0IFR5cGVTZXQpIFN1bSgpIFR5cGUKZnVuYyAoc2V0IFR5cGVTZXQpIFN0cmluZ0xpc3QoKSBbXXN0cmluZwpmdW5jIChzZXQgVHlwZVNldCkgU3RyaW5nKCkgc3RyaW5nCmZ1bmMgKHNldCBUeXBlU2V0KSBNa1N0cmluZyhzZXAgc3RyaW5nKSBzdHJpbmcKZnVuYyAoc2V0IFR5cGVTZXQpIE1rU3RyaW5nMyhiZWZvcmUsIGJldHdlZW4sIGFmdGVyIHN0cmluZykgc3RyaW5nCmZ1bmMgKHNldCBUeXBlU2V0KSBVbm1hcnNoYWxKU09OKGIgW11ieXRlKSBlcnJvcgpmdW5jIChzZXQgVHlwZVNldCkgTWFyc2hhbEpTT04oKSAoW11ieXRlLCBlcnJvcikKZnVuYyAoc2V0IFR5cGVTZXQpIFN0cmluZ01hcCgpIG1hcFtzdHJpbmddYm9vbAo=\"")
		packr.PackJSONBytes("builtin", "threadsafe/collection.tpl", "\"Ly8gR2VuZXJhdGVkIGZyb20ge3suVGVtcGxhdGVGaWxlfX0gd2l0aCBUeXBlPXt7LlR5cGV9fQovLyBvcHRpb25zOiBDb21wYXJhYmxlOnt7LkNvbXBhcmFibGV9fSBOdW1lcmljOnt7Lk51bWVyaWN9fSBPcmRlcmVkOnt7Lk9yZGVyZWR9fSBTdHJpbmdlcjp7ey5TdHJpbmdlcn19IE11dGFibGU6YWx3YXlzCi8vIGJ5IHJ1bnRlbXBsYXRlIHt7LkFwcFZlcnNpb259fQovLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2pvaGFuYnJhbmRob3JzdC9ydW50ZW1wbGF0ZS9ibG9iL21hc3Rlci9CVUlMVElOLm1kCgpwYWNrYWdlIHt7LlBhY2thZ2V9fQoKe3tpZiAuSGFzSW1wb3J0fX0KaW1wb3J0ICgKCXt7LkltcG9ydH19CikKCnt7ZW5kIC19fQovLyB7ey5QcmVmaXguVX19e3suVHlwZS5VfX1TaXplciBkZWZpbmVzIGFuIGludGVyZmFjZSBmb3Igc2l6aW5nIG1ldGhvZHMgb24ge3suVHlwZX19IGNvbGxlY3Rpb25zLgp0eXBlIHt7LlByZWZpeC5VfX17ey5UeXBlLlV9fVNpemVyIGludGVyZmFjZSB7CgkvLyBJc0VtcHR5IHRlc3RzIHdoZXRoZXIge3suUHJlZml4LlV9fXt7LlR5cGUuVX19Q29sbGVjdGlvbiBpcyBlbXB0eS4KCUlzRW1wdHkoKSBib29sCgoJLy8gTm9uRW1wdHkgdGVzdHMgd2hldGhlciB7ey5QcmVmaXguVX19e3suVHlwZS5VfX1Db2xsZWN0aW9uIGlzIGVtcHR5LgoJTm9uRW1wdHkoKSBib29sCgoJLy8gU2l6ZSByZXR1cm5zIHRoZSBudW1iZXIgb2YgaXRlbXMgaW4gdGhlIGxpc3QgLSBhbiBhbGlhcyBvZiBMZW4oKS4KCVNpemUoKSBpbnQKfQp7ey0gaWYgLlN0cmluZ2VyfX0KCi8vIHt7LlByZWZpeC5VfX17ey5UeXBlLlV9fU1rU3RyaW5nZXIgZGVmaW5lcyBhbiBpbnRlcmZhY2UgZm9yIHN0cmluZ2VyIG1ldGhvZHMgb24ge3suVHlwZX19IGNvbGxlY3Rpb25zLgp0eXBlIHt7LlByZWZpeC5VfX17ey5UeXBlLlV9fU1rU3RyaW5nZXIgaW50ZXJmYWNlIHsKCS8vIFN0cmluZyBpbXBsZW1lbnRzIHRoZSBTdHJpbmdlciBpbnRlcmZhY2UgdG8gcmVuZGVyIHRoZSBsaXN0IGFzIGEgY29tbWEtc2VwYXJhdGVkIHN0cmluZyBlbmNsb3NlZAoJLy8gaW4gc3F1YXJlIGJyYWNrZXRzLgoJU3RyaW5nKCkgc3RyaW5nCgoJLy8gTWtTdHJpbmcgY29uY2F0ZW5hdGVzIHRoZSB2YWx1ZXMgYXMgYSBzdHJpbmcgdXNpbmcgYSBzdXBwbGllZCBzZXBhcmF0b3IuIE5vIGVuY2xvc2luZyBtYXJrcyBhcmUgYWRkZWQuCglNa1N0cmluZyhzZXAgc3RyaW5nKSBzdHJpbmcKCgkvLyBNa1N0cmluZzMgY29uY2F0ZW5hdGVzIHRoZSB2YWx1ZXMgYXMgYSBzdHJpbmcsIHVzaW5nIHRoZSBwcmVmaXgsIHNlcGFyYXRvciBhbmQgc3VmZml4IHN1cHBsaWVkLgoJTWtTdHJpbmczKGJlZm9yZSwgYmV0d2VlbiwgYWZ0ZXIgc3RyaW5nKSBzdHJpbmcKCgkvLyBpbXBsZW1lbnRzIGpzb24uTWFyc2hhbGVyIGludGVyZmFjZSB7CglNYXJzaGFsSlNPTigpIChbXWJ5dGUsIGVycm9yKQoKCS8vIGltcGxlbWVudHMganNvbi5Vbm1hcnNoYWxlciBpbnRlcmZhY2UgewoJVW5tYXJzaGFsSlNPTihiIFtdYnl0ZSkgZXJyb3IKCgkvLyBTdHJpbmdMaXN0IGdldHMgYSBsaXN0IG9mIHN0cmluZ3MgdGhhdCBkZXBpY3RzIGFsbCB0aGUgZWxlbWVudHMuCglTdHJpbmdMaXN0KCkgW11zdHJpbmcKfQp7ey0gZW5kfX0KCi8vIHt7LlByZWZpeC5VfX17ey5UeXBlLlV9fUNvbGxlY3Rpb24gZGVmaW5lcyBhbiBpbnRlcmZhY2UgZm9yIGNvbW1vbiBjb2xsZWN0aW9uIG1ldGhvZHMgb24ge3suVHlwZX19Lgp0eXBlIHt7LlByZWZpeC5VfX17ey5UeXBlLlV9fUNvbGxlY3Rpb24gaW50ZXJmYWNlIHsKCXt7LlByZWZpeC5VfX17ey5UeXBlLlV9fVNpemVyCnt7LSBpZiAuU3RyaW5nZXJ9fQoJe3suUHJlZml4LlV9fXt7LlR5cGUuVX19TWtTdHJpbmdlcgp7ey0gZW5kfX0KCgkvLyBJc1NlcXVlbmNlIHJldHVybnMgdHJ1ZSBmb3IgbGlzdHMgYW5kIHF1ZXVlcy4KCUlzU2VxdWVuY2UoKSBib29sCgoJLy8gSXNTZXQgcmV0dXJucyBmYWxzZSBmb3IgbGlzdHMgYW5kIHF1ZXVlcy4KCUlzU2V0KCkgYm9vbAp7ey0gaWYgLlRvTGlzdH19CgoJLy8gVG9MaXN0IHJldHVybnMgYSBzaGFsbG93IGNvcHkgYXMgYSBsaXN0LgoJVG9MaXN0KCkgKnt7LlByZWZpeC5VfX17ey5UeXBlLlV9fUxpc3QKe3stIGVuZH19Cnt7LSBpZiAuVG9TZXR9fQoKCS8vIFRvU2V0IHJldHVybnMgYSBzaGFsbG93IGNvcHkgYXMgYSBzZXQuCglUb1NldCgpICp7ey5QcmVmaXguVX19e3suVHlwZS5VfX1TZXQKe3stIGVuZH19CgoJLy8gVG9TbGljZSByZXR1cm5zIGEgc2hhbGxvdyBjb3B5IGFzIGEgcGxhaW4gc2xpY2UuCglUb1NsaWNlKCkgW117ey5UeXBlfX0KCgkvLyBUb0ludGVyZmFjZVNsaWNlIHJldHVybnMgYSBzaGFsbG93IGNvcHkgYXMgYSBzbGljZSBvZiBhcmJpdHJhcnkgdHlwZS4KCVRvSW50ZXJmYWNlU2xpY2UoKSBbXWludGVyZmFjZXt9CgoJLy8gRXhpc3RzIHZlcmlmaWVzIHRoYXQgb25lIG9yIG1vcmUgZWxlbWVudHMgb2Yge3suUHJlZml4LlV9fXt7LlR5cGUuVX19Q29sbGVjdGlvbiByZXR1cm4gdHJ1ZSBmb3IgdGhlIHByZWRpY2F0ZSBwLgoJRXhpc3RzKHAgZnVuYyh7ey5UeXBlfX0pIGJvb2wpIGJvb2wKCgkvLyBGb3JhbGwgdmVyaWZpZXMgdGhhdCBhbGwgZWxlbWVudHMgb2Yge3suUHJlZml4LlV9fXt7LlR5cGUuVX19Q29sbGVjdGlvbiByZXR1cm4gdHJ1ZSBmb3IgdGhlIHByZWRpY2F0ZSBwLgoJRm9yYWxsKHAgZnVuYyh7ey5UeXBlfX0pIGJvb2wpIGJvb2wKCgkvLyBGb3JlYWNoIGl0ZXJhdGVzIG92ZXIge3suUHJlZml4LlV9fXt7LlR5cGUuVX19Q29sbGVjdGlvbiBhbmQgZXhlY3V0ZXMgdGhlIGZ1bmN0aW9uIGYgYWdhaW5zdCBlYWNoIGVsZW1lbnQuCglGb3JlYWNoKGYgZnVuYyh7ey5UeXBlfX0pKQoKCS8vIEZpbmQgcmV0dXJucyB0aGUgZmlyc3Qge3suVHlwZX19IHRoYXQgcmV0dXJucyB0cnVlIGZvciB0aGUgcHJlZGljYXRlIHAuCgkvLyBGYWxzZSBpcyByZXR1cm5lZCBpZiBub25lIG1hdGNoLgoJRmluZChwIGZ1bmMoe3suVHlwZX19KSBib29sKSAoe3suVHlwZX19LCBib29sKQp7ey0gcmFuZ2UgLk1hcFRvfX0KCgkvLyBNYXBUb3t7LlV9fSByZXR1cm5zIGEgbmV3IFtde3sufX0gYnkgdHJhbnNmb3JtaW5nIGV2ZXJ5IGVsZW1lbnQgd2l0aCBmdW5jdGlvbiBmLgoJLy8gVGhlIHJlc3VsdGluZyBzbGljZSBpcyB0aGUgc2FtZSBzaXplIGFzIHRoZSBjb2xsZWN0aW9uLiBUaGUgY29sbGVjdGlvbiBpcyBub3QgbW9kaWZpZWQuCglNYXBUb3t7LlV9fShmIGZ1bmMoe3skLlR5cGV9fSkge3sufX0pIFtde3sufX0Ke3stIGVuZH19Cnt7LSByYW5nZSAuTWFwVG99fQoKCS8vIEZsYXRNYXB7ey5VfX0gcmV0dXJucyBhIG5ldyBbXXt7Ln19IGJ5IHRyYW5zZm9ybWluZyBldmVyeSBlbGVtZW50IHdpdGggZnVuY3Rpb24gZgoJLy8gdGhhdCByZXR1cm5zIHplcm8gb3IgbW9yZSBpdGVtcyBpbiBhIHNsaWNlLiBUaGUgcmVzdWx0aW5nIGxpc3QgbWF5IGhhdmUgYSBkaWZmZXJlbnQgc2l6ZSB0byB0aGUKCS8vIGNvbGxlY3Rpb24uIFRoZSBjb2xsZWN0aW9uIGlzIG5vdCBtb2RpZmllZC4KCUZsYXRNYXBUb3t7LlV9fShmIGZ1bmMoe3skLlR5cGV9fSkgW117ey59fSkgW117ey59fQp7ey0gZW5kfX0KCgkvLyBTZW5kIHJldHVybnMgYSBjaGFubmVsIHRoYXQgd2lsbCBzZW5kIGFsbCB0aGUgZWxlbWVudHMgaW4gb3JkZXIuIENhbiBiZSB1c2VkIHdpdGggdGhlIHBsdW1iaW5nIGNvZGUsIGZvciBleGFtcGxlLgoJLy8gQSBnb3JvdXRpbmUgaXMgY3JlYXRlZCB0byBzZW5kIHRoZSBlbGVtZW50czsgdGhpcyBvbmx5IHRlcm1pbmF0ZXMgd2hlbiBhbGwgdGhlIGVsZW1lbnRzIGhhdmUgYmVlbiBjb25zdW1lZAoJU2VuZCgpIDwtY2hhbiB7ey5UeXBlfX0KCgkvLyBDb3VudEJ5IGdpdmVzIHRoZSBudW1iZXIgZWxlbWVudHMgb2Yge3suUHJlZml4LlV9fXt7LlR5cGUuVX19Q29sbGVjdGlvbiB0aGF0IHJldHVybiB0cnVlIGZvciB0aGUgcHJlZGljYXRlIHAuCglDb3VudEJ5KHAgZnVuYyh7ey5UeXBlfX0pIGJvb2wpIGludAp7ey0gaWYgLkNvbXBhcmFibGV9fQoKCS8vIENvbnRhaW5zIGRldGVybWluZXMgd2hldGhlciBhIGdpdmVuIGl0ZW0gaXMgYWxyZWFkeSBpbiB0aGUgY29sbGVjdGlvbiwgcmV0dXJuaW5nIHRydWUgaWYgc28uCglDb250YWlucyh2IHt7LlR5cGV9fSkgYm9vbAoKCS8vIENvbnRhaW5zQWxsIGRldGVybWluZXMgd2hldGhlciB0aGUgZ2l2ZW4gaXRlbXMgYXJlIGFsbCBpbiB0aGUgY29sbGVjdGlvbiwgcmV0dXJuaW5nIHRydWUgaWYgc28uCglDb250YWluc0FsbCh2IC4uLnt7LlR5cGV9fSkgYm9vbAp7ey0gZW5kfX0KCgkvLyBDbGVhciB0aGUgZW50aXJlIGNvbGxlY3Rpb24uCglDbGVhcigpCgoJLy8gQWRkIGFkZHMgaXRlbXMgdG8gdGhlIGN1cnJlbnQgY29sbGVjdGlvbi4KCUFkZChtb3JlIC4uLnt7LlR5cGV9fSkKe3stIGlmIC5PcmRlcmVkfX0KCgkvLyBNaW4gcmV0dXJucyB0aGUgbWluaW11bSB2YWx1ZSBvZiBhbGwgdGhlIGl0ZW1zIGluIHRoZSBjb2xsZWN0aW9uLiBQYW5pY3MgaWYgdGhlcmUgYXJlIG5vIGVsZW1lbnRzLgoJTWluKCkge3suVHlwZS5OYW1lfX0KCgkvLyBNYXggcmV0dXJucyB0aGUgbWluaW11bSB2YWx1ZSBvZiBhbGwgdGhlIGl0ZW1zIGluIHRoZSBjb2xsZWN0aW9uLiBQYW5pY3MgaWYgdGhlcmUgYXJlIG5vIGVsZW1lbnRzLgoJTWF4KCkge3suVHlwZS5OYW1lfX0Ke3stIGVuZH19CgoJLy8gTWluQnkgcmV0dXJucyBhbiBlbGVtZW50IG9mIHt7LlByZWZpeC5VfX17ey5UeXBlLlV9fUNvbGxlY3Rpb24gY29udGFpbmluZyB0aGUgbWluaW11bSB2YWx1ZSwgd2hlbiBjb21wYXJlZCB0byBvdGhlciBlbGVtZW50cwoJLy8gdXNpbmcgYSBwYXNzZWQgZnVuYyBkZWZpbmluZyDigJhsZXNz4oCZLiBJbiB0aGUgY2FzZSBvZiBtdWx0aXBsZSBpdGVtcyBiZWluZyBlcXVhbGx5IG1pbmltYWwsIHRoZSBmaXJzdCBzdWNoCgkvLyBlbGVtZW50IGlzIHJldHVybmVkLiBQYW5pY3MgaWYgdGhlcmUgYXJlIG5vIGVsZW1lbnRzLgoJTWluQnkobGVzcyBmdW5jKHt7LlR5cGV9fSwge3suVHlwZX19KSBib29sKSB7ey5UeXBlfX0KCgkvLyBNYXhCeSByZXR1cm5zIGFuIGVsZW1lbnQgb2Yge3suUHJlZml4LlV9fXt7LlR5cGUuVX19Q29sbGVjdGlvbiBjb250YWluaW5nIHRoZSBtYXhpbXVtIHZhbHVlLCB3aGVuIGNvbXBhcmVkIHRvIG90aGVyIGVsZW1lbnRzCgkvLyB1c2luZyBhIHBhc3NlZCBmdW5jIGRlZmluaW5nIOKAmGxlc3PigJkuIEluIHRoZSBjYXNlIG9mIG11bHRpcGxlIGl0ZW1zIGJlaW5nIGVxdWFsbHkgbWF4aW1hbCwgdGhlIGZpcnN0IHN1Y2gKCS8vIGVsZW1lbnQgaXMgcmV0dXJuZWQuIFBhbmljcyBpZiB0aGVyZSBhcmUgbm8gZWxlbWVudHMuCglNYXhCeShsZXNzIGZ1bmMoe3suVHlwZX19LCB7ey5UeXBlfX0pIGJvb2wpIHt7LlR5cGV9fQp7ey0gaWYgLk51bWVyaWN9fQoKCS8vIFN1bSByZXR1cm5zIHRoZSBzdW0gb2YgYWxsIHRoZSBlbGVtZW50cyBpbiB0aGUgY29sbGVjdGlvbi4KCVN1bSgpIHt7LlR5cGUuTmFtZX19Cnt7LSBlbmR9fQp9Cg==\"")
		packr.PackJSONBytes("builtin", "threadsafe/list.tpl", "\"\"")
		packr.PackJSONBytes("builtin", "threadsafe/map.tpl", "\"\"")
		packr.PackJSONBytes("builtin", "threadsafe/queue.tpl", "\"\"")
		packr.PackJSONBytes("builtin", "threadsafe/set.tpl", "\"\"")
		packr.PackJSONBytes("builtin", "threadsafe-list-api.txt", "\"ZnVuYyBNYWtlVHlwZUxpc3QobGVuZ3RoLCBjYXBhY2l0eSBpbnQpICpUeXBlTGlzdApmdW5jIE5ld1R5cGVMaXN0KHZhbHVlcyAuLi5UeXBlKSAqVHlwZUxpc3QKZnVuYyBDb252ZXJ0VHlwZUxpc3QodmFsdWVzIC4uLmludGVyZmFjZXt9KSAoKlR5cGVMaXN0LCBib29sKQpmdW5jIEJ1aWxkVHlwZUxpc3RGcm9tQ2hhbihzb3VyY2UgPC1jaGFuIFR5cGUpICpUeXBlTGlzdApmdW5jIChsaXN0ICpUeXBlTGlzdCkgSXNTZXF1ZW5jZSgpIGJvb2wKZnVuYyAobGlzdCAqVHlwZUxpc3QpIElzU2V0KCkgYm9vbApmdW5jIChsaXN0ICpUeXBlTGlzdCkgVG9MaXN0KCkgKlR5cGVMaXN0CmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBUb1NldCgpICpUeXBlU2V0CmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBUb1NsaWNlKCkgW11UeXBlCmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBUb0ludGVyZmFjZVNsaWNlKCkgW11pbnRlcmZhY2V7fQpmdW5jIChsaXN0ICpUeXBlTGlzdCkgQ2xvbmUoKSAqVHlwZUxpc3QKZnVuYyAobGlzdCAqVHlwZUxpc3QpIEdldChpIGludCkgVHlwZQpmdW5jIChsaXN0ICpUeXBlTGlzdCkgSGVhZCgpIFR5cGUKZnVuYyAobGlzdCAqVHlwZUxpc3QpIEhlYWRPcHRpb24oKSBUeXBlCmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBMYXN0KCkgVHlwZQpmdW5jIChsaXN0ICpUeXBlTGlzdCkgTGFzdE9wdGlvbigpIFR5cGUKZnVuYyAobGlzdCAqVHlwZUxpc3QpIFRhaWwoKSAqVHlwZUxpc3QKZnVuYyAobGlzdCAqVHlwZUxpc3QpIEluaXQoKSAqVHlwZUxpc3QKZnVuYyAobGlzdCAqVHlwZUxpc3QpIElzRW1wdHkoKSBib29sCmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBOb25FbXB0eSgpIGJvb2wKZnVuYyAobGlzdCAqVHlwZUxpc3QpIFNpemUoKSBpbnQKZnVuYyAobGlzdCAqVHlwZUxpc3QpIExlbigpIGludApmdW5jIChsaXN0ICpUeXBlTGlzdCkgU3dhcChpLCBqIGludCkKZnVuYyAobGlzdCAqVHlwZUxpc3QpIENvbnRhaW5zKHYgVHlwZSkgYm9vbApmdW5jIChsaXN0ICpUeXBlTGlzdCkgQ29udGFpbnNBbGwoaSAuLi5UeXBlKSBib29sCmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBFeGlzdHMocCBmdW5jKFR5cGUpIGJvb2wpIGJvb2wKZnVuYyAobGlzdCAqVHlwZUxpc3QpIEZvcmFsbChwIGZ1bmMoVHlwZSkgYm9vbCkgYm9vbApmdW5jIChsaXN0ICpUeXBlTGlzdCkgRm9yZWFjaChmIGZ1bmMoVHlwZSkpCmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBTZW5kKCkgPC1jaGFuIFR5cGUKZnVuYyAobGlzdCAqVHlwZUxpc3QpIFJldmVyc2UoKSAqVHlwZUxpc3QKZnVuYyAobGlzdCAqVHlwZUxpc3QpIERvUmV2ZXJzZSgpICpUeXBlTGlzdApmdW5jIChsaXN0ICpUeXBlTGlzdCkgU2h1ZmZsZSgpICpUeXBlTGlzdApmdW5jIChsaXN0ICpUeXBlTGlzdCkgRG9TaHVmZmxlKCkgKlR5cGVMaXN0CmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBDbGVhcigpCmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBBZGQobW9yZSAuLi5UeXBlKQpmdW5jIChsaXN0ICpUeXBlTGlzdCkgQXBwZW5kKG1vcmUgLi4uVHlwZSkgKlR5cGVMaXN0CmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBEb0luc2VydEF0KGluZGV4IGludCwgbW9yZSAuLi5UeXBlKSAqVHlwZUxpc3QKZnVuYyAobGlzdCAqVHlwZUxpc3QpIERvRGVsZXRlRmlyc3QobiBpbnQpICpUeXBlTGlzdApmdW5jIChsaXN0ICpUeXBlTGlzdCkgRG9EZWxldGVMYXN0KG4gaW50KSAqVHlwZUxpc3QKZnVuYyAobGlzdCAqVHlwZUxpc3QpIERvRGVsZXRlQXQoaW5kZXgsIG4gaW50KSAqVHlwZUxpc3QKZnVuYyAobGlzdCAqVHlwZUxpc3QpIERvS2VlcFdoZXJlKHAgZnVuYyhUeXBlKSBib29sKSAqVHlwZUxpc3QKZnVuYyAobGlzdCAqVHlwZUxpc3QpIFRha2UobiBpbnQpICpUeXBlTGlzdApmdW5jIChsaXN0ICpUeXBlTGlzdCkgRHJvcChuIGludCkgKlR5cGVMaXN0CmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBUYWtlTGFzdChuIGludCkgKlR5cGVMaXN0CmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBEcm9wTGFzdChuIGludCkgKlR5cGVMaXN0CmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBUYWtlV2hpbGUocCBmdW5jKFR5cGUpIGJvb2wpICpUeXBlTGlzdApmdW5jIChsaXN0ICpUeXBlTGlzdCkgRHJvcFdoaWxlKHAgZnVuYyhUeXBlKSBib29sKSAqVHlwZUxpc3QKZnVuYyAobGlzdCAqVHlwZUxpc3QpIEZpbmQocCBmdW5jKFR5cGUpIGJvb2wpIChUeXBlLCBib29sKQpmdW5jIChsaXN0ICpUeXBlTGlzdCkgRmlsdGVyKHAgZnVuYyhUeXBlKSBib29sKSAqVHlwZUxpc3QKZnVuYyAobGlzdCAqVHlwZUxpc3QpIFBhcnRpdGlvbihwIGZ1bmMoVHlwZSkgYm9vbCkgKCpUeXBlTGlzdCwgKlR5cGVMaXN0KQpmdW5jIChsaXN0ICpUeXBlTGlzdCkgTWFwKGYgZnVuYyhUeXBlKSBUeXBlKSAqVHlwZUxpc3QKZnVuYyAobGlzdCAqVHlwZUxpc3QpIEZsYXRNYXAoZiBmdW5jKFR5cGUpIFtdVHlwZSkgKlR5cGVMaXN0CmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBDb3VudEJ5KHAgZnVuYyhUeXBlKSBib29sKSAocmVzdWx0IGludCkKZnVuYyAobGlzdCAqVHlwZUxpc3QpIE1pbkJ5KGxlc3MgZnVuYyhUeXBlLCBUeXBlKSBib29sKSBUeXBlCmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBNYXhCeShsZXNzIGZ1bmMoVHlwZSwgVHlwZSkgYm9vbCkgVHlwZQpmdW5jIChsaXN0ICpUeXBlTGlzdCkgRGlzdGluY3RCeShlcXVhbCBmdW5jKFR5cGUsIFR5cGUpIGJvb2wpICpUeXBlTGlzdApmdW5jIChsaXN0ICpUeXBlTGlzdCkgSW5kZXhXaGVyZShwIGZ1bmMoVHlwZSkgYm9vbCkgaW50CmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBJbmRleFdoZXJlMihwIGZ1bmMoVHlwZSkgYm9vbCwgZnJvbSBpbnQpIGludApmdW5jIChsaXN0ICpUeXBlTGlzdCkgTGFzdEluZGV4V2hlcmUocCBmdW5jKFR5cGUpIGJvb2wpIGludApmdW5jIChsaXN0ICpUeXBlTGlzdCkgTGFzdEluZGV4V2hlcmUyKHAgZnVuYyhUeXBlKSBib29sLCBiZWZvcmUgaW50KSBpbnQKZnVuYyAoc2wgc29ydGFibGVUeXBlTGlzdCkgTGVzcyhpLCBqIGludCkgYm9vbApmdW5jIChzbCBzb3J0YWJsZVR5cGVMaXN0KSBMZW4oKSBpbnQKZnVuYyAoc2wgc29ydGFibGVUeXBlTGlzdCkgU3dhcChpLCBqIGludCkKZnVuYyAobGlzdCAqVHlwZUxpc3QpIFNvcnRCeShsZXNzIGZ1bmMoaSwgaiBUeXBlKSBib29sKSAqVHlwZUxpc3QKZnVuYyAobGlzdCAqVHlwZUxpc3QpIFN0YWJsZVNvcnRCeShsZXNzIGZ1bmMoaSwgaiBUeXBlKSBib29sKSAqVHlwZUxpc3QKZnVuYyAobGlzdCAqVHlwZUxpc3QpIFNvcnRlZCgpICpUeXBlTGlzdApmdW5jIChsaXN0ICpUeXBlTGlzdCkgU3RhYmxlU29ydGVkKCkgKlR5cGVMaXN0CmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBNaW4oKSBUeXBlCmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBNYXgoKSAocmVzdWx0IFR5cGUpCmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBTdW0oKSBUeXBlCmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBTdHJpbmdMaXN0KCkgW11zdHJpbmcKZnVuYyAobGlzdCAqVHlwZUxpc3QpIFN0cmluZygpIHN0cmluZwpmdW5jIChsaXN0ICpUeXBlTGlzdCkgTWtTdHJpbmcoc2VwIHN0cmluZykgc3RyaW5nCmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBNa1N0cmluZzMoYmVmb3JlLCBiZXR3ZWVuLCBhZnRlciBzdHJpbmcpIHN0cmluZwpmdW5jIChsaXN0ICpUeXBlTGlzdCkgVW5tYXJzaGFsSlNPTihiIFtdYnl0ZSkgZXJyb3IKZnVuYyAobGlzdCBUeXBlTGlzdCkgTWFyc2hhbEpTT04oKSAoW11ieXRlLCBlcnJvcikKZnVuYyAobGlzdCAqVHlwZUxpc3QpIEdvYkRlY29kZShiIFtdYnl0ZSkgZXJyb3IKZnVuYyAobGlzdCBUeXBlTGlzdCkgR29iRW5jb2RlKCkgKFtdYnl0ZSwgZXJyb3IpCg==\"")
		packr.PackJSONBytes("builtin", "threadsafe-map-api.txt", "\"ZnVuYyAodHMgS2V5VHlwZVR1cGxlcykgQXBwZW5kMShrIEtleSwgdiBUeXBlKSBLZXlUeXBlVHVwbGVzCmZ1bmMgKHRzIEtleVR5cGVUdXBsZXMpIEFwcGVuZDIoazEgS2V5LCB2MSBUeXBlLCBrMiBLZXksIHYyIFR5cGUpIEtleVR5cGVUdXBsZXMKZnVuYyAodHMgS2V5VHlwZVR1cGxlcykgQXBwZW5kMyhrMSBLZXksIHYxIFR5cGUsIGsyIEtleSwgdjIgVHlwZSwgazMgS2V5LCB2MyBUeXBlKSBLZXlUeXBlVHVwbGVzCmZ1bmMgS2V5VHlwZVppcChrZXlzIC4uLktleSkgS2V5VHlwZVR1cGxlcwpmdW5jICh0cyBLZXlUeXBlVHVwbGVzKSBWYWx1ZXModmFsdWVzIC4uLlR5cGUpIEtleVR5cGVUdXBsZXMKZnVuYyBOZXdLZXlUeXBlTWFwMShrIEtleSwgdiBUeXBlKSAqS2V5VHlwZU1hcApmdW5jIE5ld0tleVR5cGVNYXAoa3YgLi4uS2V5VHlwZVR1cGxlKSAqS2V5VHlwZU1hcApmdW5jIChtbSAqS2V5VHlwZU1hcCkgS2V5cygpIFtdS2V5CmZ1bmMgKG1tICpLZXlUeXBlTWFwKSBWYWx1ZXMoKSBbXVR5cGUKZnVuYyAobW0gKktleVR5cGVNYXApIFRvU2xpY2UoKSBbXUtleVR5cGVUdXBsZQpmdW5jIChtbSAqS2V5VHlwZU1hcCkgR2V0KGsgS2V5KSAoVHlwZSwgYm9vbCkKZnVuYyAobW0gKktleVR5cGVNYXApIFB1dChrIEtleSwgdiBUeXBlKSBib29sCmZ1bmMgKG1tICpLZXlUeXBlTWFwKSBDb250YWluc0tleShrIEtleSkgYm9vbApmdW5jIChtbSAqS2V5VHlwZU1hcCkgQ29udGFpbnNBbGxLZXlzKGtrIC4uLktleSkgYm9vbApmdW5jIChtbSAqS2V5VHlwZU1hcCkgQ2xlYXIoKQpmdW5jIChtbSAqS2V5VHlwZU1hcCkgUmVtb3ZlKGsgS2V5KQpmdW5jIChtbSAqS2V5VHlwZU1hcCkgUG9wKGsgS2V5KSAoVHlwZSwgYm9vbCkKZnVuYyAobW0gKktleVR5cGVNYXApIFNpemUoKSBpbnQKZnVuYyAobW0gKktleVR5cGVNYXApIElzRW1wdHkoKSBib29sCmZ1bmMgKG1tICpLZXlUeXBlTWFwKSBOb25FbXB0eSgpIGJvb2wKZnVuYyAobW0gKktleVR5cGVNYXApIERyb3BXaGVyZShmbiBmdW5jKEtleSwgVHlwZSkgYm9vbCkgS2V5VHlwZVR1cGxlcwpmdW5jIChtbSAqS2V5VHlwZU1hcCkgRm9yZWFjaChmIGZ1bmMoS2V5LCBUeXBlKSkKZnVuYyAobW0gKktleVR5cGVNYXApIEZvcmFsbChwIGZ1bmMoS2V5LCBUeXBlKSBib29sKSBib29sCmZ1bmMgKG1tICpLZXlUeXBlTWFwKSBFeGlzdHMocCBmdW5jKEtleSwgVHlwZSkgYm9vbCkgYm9vbApmdW5jIChtbSAqS2V5VHlwZU1hcCkgRmluZChwIGZ1bmMoS2V5LCBUeXBlKSBib29sKSAoS2V5VHlwZVR1cGxlLCBib29sKQpmdW5jIChtbSAqS2V5VHlwZU1hcCkgRmlsdGVyKHAgZnVuYyhLZXksIFR5cGUpIGJvb2wpICpLZXlUeXBlTWFwCmZ1bmMgKG1tICpLZXlUeXBlTWFwKSBQYXJ0aXRpb24ocCBmdW5jKEtleSwgVHlwZSkgYm9vbCkgKG1hdGNoaW5nICpLZXlUeXBlTWFwLCBvdGhlcnMgKktleVR5cGVNYXApCmZ1bmMgKG1tICpLZXlUeXBlTWFwKSBNYXAoZiBmdW5jKEtleSwgVHlwZSkgKEtleSwgVHlwZSkpICpLZXlUeXBlTWFwCmZ1bmMgKG1tICpLZXlUeXBlTWFwKSBGbGF0TWFwKGYgZnVuYyhLZXksIFR5cGUpIFtdS2V5VHlwZVR1cGxlKSAqS2V5VHlwZU1hcApmdW5jIChtbSAqS2V5VHlwZU1hcCkgQ2xvbmUoKSAqS2V5VHlwZU1hcApmdW5jIChtbSAqS2V5VHlwZU1hcCkgU3RyaW5nKCkgc3RyaW5nCmZ1bmMgKG1tICpLZXlUeXBlTWFwKSBNa1N0cmluZyhzZXAgc3RyaW5nKSBzdHJpbmcKZnVuYyAobW0gKktleVR5cGVNYXApIE1rU3RyaW5nMyhiZWZvcmUsIGJldHdlZW4sIGFmdGVyIHN0cmluZykgc3RyaW5nCmZ1bmMgKG1tICpLZXlUeXBlTWFwKSBVbm1hcnNoYWxKU09OKGIgW11ieXRlKSBlcnJvcgpmdW5jIChtbSAqS2V5VHlwZU1hcCkgTWFyc2hhbEpTT04oKSAoW11ieXRlLCBlcnJvcikKZnVuYyAobW0gKktleVR5cGVNYXApIEdvYkRlY29kZShiIFtdYnl0ZSkgZXJyb3IKZnVuYyAobW0gKktleVR5cGVNYXApIEdvYkVuY29kZSgpIChbXWJ5dGUsIGVycm9yKQo=\"")
		packr.PackJSONBytes("builtin", "threadsafe-plist-api.txt", "\"ZnVuYyBNYWtlVHlwZUxpc3QobGVuZ3RoLCBjYXBhY2l0eSBpbnQpICpUeXBlTGlzdApmdW5jIE5ld1R5cGVMaXN0KHZhbHVlcyAuLi4qVHlwZSkgKlR5cGVMaXN0CmZ1bmMgQ29udmVydFR5cGVMaXN0KHZhbHVlcyAuLi5pbnRlcmZhY2V7fSkgKCpUeXBlTGlzdCwgYm9vbCkKZnVuYyBCdWlsZFR5cGVMaXN0RnJvbUNoYW4oc291cmNlIDwtY2hhbiAqVHlwZSkgKlR5cGVMaXN0CmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBJc1NlcXVlbmNlKCkgYm9vbApmdW5jIChsaXN0ICpUeXBlTGlzdCkgSXNTZXQoKSBib29sCmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBUb0xpc3QoKSAqVHlwZUxpc3QKZnVuYyAobGlzdCAqVHlwZUxpc3QpIFRvU2V0KCkgKlR5cGVTZXQKZnVuYyAobGlzdCAqVHlwZUxpc3QpIFRvU2xpY2UoKSBbXSpUeXBlCmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBUb0ludGVyZmFjZVNsaWNlKCkgW11pbnRlcmZhY2V7fQpmdW5jIChsaXN0ICpUeXBlTGlzdCkgQ2xvbmUoKSAqVHlwZUxpc3QKZnVuYyAobGlzdCAqVHlwZUxpc3QpIEdldChpIGludCkgKlR5cGUKZnVuYyAobGlzdCAqVHlwZUxpc3QpIEhlYWQoKSAqVHlwZQpmdW5jIChsaXN0ICpUeXBlTGlzdCkgSGVhZE9wdGlvbigpICpUeXBlCmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBMYXN0KCkgKlR5cGUKZnVuYyAobGlzdCAqVHlwZUxpc3QpIExhc3RPcHRpb24oKSAqVHlwZQpmdW5jIChsaXN0ICpUeXBlTGlzdCkgVGFpbCgpICpUeXBlTGlzdApmdW5jIChsaXN0ICpUeXBlTGlzdCkgSW5pdCgpICpUeXBlTGlzdApmdW5jIChsaXN0ICpUeXBlTGlzdCkgSXNFbXB0eSgpIGJvb2wKZnVuYyAobGlzdCAqVHlwZUxpc3QpIE5vbkVtcHR5KCkgYm9vbApmdW5jIChsaXN0ICpUeXBlTGlzdCkgU2l6ZSgpIGludApmdW5jIChsaXN0ICpUeXBlTGlzdCkgTGVuKCkgaW50CmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBTd2FwKGksIGogaW50KQpmdW5jIChsaXN0ICpUeXBlTGlzdCkgQ29udGFpbnModiAqVHlwZSkgYm9vbApmdW5jIChsaXN0ICpUeXBlTGlzdCkgQ29udGFpbnNBbGwoaSAuLi4qVHlwZSkgYm9vbApmdW5jIChsaXN0ICpUeXBlTGlzdCkgRXhpc3RzKHAgZnVuYygqVHlwZSkgYm9vbCkgYm9vbApmdW5jIChsaXN0ICpUeXBlTGlzdCkgRm9yYWxsKHAgZnVuYygqVHlwZSkgYm9vbCkgYm9vbApmdW5jIChsaXN0ICpUeXBlTGlzdCkgRm9yZWFjaChmIGZ1bmMoKlR5cGUpKQpmdW5jIChsaXN0ICpUeXBlTGlzdCkgU2VuZCgpIDwtY2hhbiAqVHlwZQpmdW5jIChsaXN0ICpUeXBlTGlzdCkgUmV2ZXJzZSgpICpUeXBlTGlzdApmdW5jIChsaXN0ICpUeXBlTGlzdCkgRG9SZXZlcnNlKCkgKlR5cGVMaXN0CmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBTaHVmZmxlKCkgKlR5cGVMaXN0CmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBEb1NodWZmbGUoKSAqVHlwZUxpc3QKZnVuYyAobGlzdCAqVHlwZUxpc3QpIENsZWFyKCkKZnVuYyAobGlzdCAqVHlwZUxpc3QpIEFkZChtb3JlIC4uLipUeXBlKQpmdW5jIChsaXN0ICpUeXBlTGlzdCkgQXBwZW5kKG1vcmUgLi4uKlR5cGUpICpUeXBlTGlzdApmdW5jIChsaXN0ICpUeXBlTGlzdCkgRG9JbnNlcnRBdChpbmRleCBpbnQsIG1vcmUgLi4uKlR5cGUpICpUeXBlTGlzdApmdW5jIChsaXN0ICpUeXBlTGlzdCkgRG9EZWxldGVGaXJzdChuIGludCkgKlR5cGVMaXN0CmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBEb0RlbGV0ZUxhc3QobiBpbnQpICpUeXBlTGlzdApmdW5jIChsaXN0ICpUeXBlTGlzdCkgRG9EZWxldGVBdChpbmRleCwgbiBpbnQpICpUeXBlTGlzdApmdW5jIChsaXN0ICpUeXBlTGlzdCkgRG9LZWVwV2hlcmUocCBmdW5jKCpUeXBlKSBib29sKSAqVHlwZUxpc3QKZnVuYyAobGlzdCAqVHlwZUxpc3QpIFRha2UobiBpbnQpICpUeXBlTGlzdApmdW5jIChsaXN0ICpUeXBlTGlzdCkgRHJvcChuIGludCkgKlR5cGVMaXN0CmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBUYWtlTGFzdChuIGludCkgKlR5cGVMaXN0CmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBEcm9wTGFzdChuIGludCkgKlR5cGVMaXN0CmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBUYWtlV2hpbGUocCBmdW5jKCpUeXBlKSBib29sKSAqVHlwZUxpc3QKZnVuYyAobGlzdCAqVHlwZUxpc3QpIERyb3BXaGlsZShwIGZ1bmMoKlR5cGUpIGJvb2wpICpUeXBlTGlzdApmdW5jIChsaXN0ICpUeXBlTGlzdCkgRmluZChwIGZ1bmMoKlR5cGUpIGJvb2wpICgqVHlwZSwgYm9vbCkKZnVuYyAobGlzdCAqVHlwZUxpc3QpIEZpbHRlcihwIGZ1bmMoKlR5cGUpIGJvb2wpICpUeXBlTGlzdApmdW5jIChsaXN0ICpUeXBlTGlzdCkgUGFydGl0aW9uKHAgZnVuYygqVHlwZSkgYm9vbCkgKCpUeXBlTGlzdCwgKlR5cGVMaXN0KQpmdW5jIChsaXN0ICpUeXBlTGlzdCkgTWFwKGYgZnVuYygqVHlwZSkgKlR5cGUpICpUeXBlTGlzdApmdW5jIChsaXN0ICpUeXBlTGlzdCkgRmxhdE1hcChmIGZ1bmMoKlR5cGUpIFtdKlR5cGUpICpUeXBlTGlzdApmdW5jIChsaXN0ICpUeXBlTGlzdCkgQ291bnRCeShwIGZ1bmMoKlR5cGUpIGJvb2wpIChyZXN1bHQgaW50KQpmdW5jIChsaXN0ICpUeXBlTGlzdCkgTWluQnkobGVzcyBmdW5jKCpUeXBlLCAqVHlwZSkgYm9vbCkgKlR5cGUKZnVuYyAobGlzdCAqVHlwZUxpc3QpIE1heEJ5KGxlc3MgZnVuYygqVHlwZSwgKlR5cGUpIGJvb2wpICpUeXBlCmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBEaXN0aW5jdEJ5KGVxdWFsIGZ1bmMoKlR5cGUsICpUeXBlKSBib29sKSAqVHlwZUxpc3QKZnVuYyAobGlzdCAqVHlwZUxpc3QpIEluZGV4V2hlcmUocCBmdW5jKCpUeXBlKSBib29sKSBpbnQKZnVuYyAobGlzdCAqVHlwZUxpc3QpIEluZGV4V2hlcmUyKHAgZnVuYygqVHlwZSkgYm9vbCwgZnJvbSBpbnQpIGludApmdW5jIChsaXN0ICpUeXBlTGlzdCkgTGFzdEluZGV4V2hlcmUocCBmdW5jKCpUeXBlKSBib29sKSBpbnQKZnVuYyAobGlzdCAqVHlwZUxpc3QpIExhc3RJbmRleFdoZXJlMihwIGZ1bmMoKlR5cGUpIGJvb2wsIGJlZm9yZSBpbnQpIGludApmdW5jIChzbCBzb3J0YWJsZVR5cGVMaXN0KSBMZXNzKGksIGogaW50KSBib29sCmZ1bmMgKHNsIHNvcnRhYmxlVHlwZUxpc3QpIExlbigpIGludApmdW5jIChzbCBzb3J0YWJsZVR5cGVMaXN0KSBTd2FwKGksIGogaW50KQpmdW5jIChsaXN0ICpUeXBlTGlzdCkgU29ydEJ5KGxlc3MgZnVuYyhpLCBqICpUeXBlKSBib29sKSAqVHlwZUxpc3QKZnVuYyAobGlzdCAqVHlwZUxpc3QpIFN0YWJsZVNvcnRCeShsZXNzIGZ1bmMoaSwgaiAqVHlwZSkgYm9vbCkgKlR5cGVMaXN0CmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBTb3J0ZWQoKSAqVHlwZUxpc3QKZnVuYyAobGlzdCAqVHlwZUxpc3QpIFN0YWJsZVNvcnRlZCgpICpUeXBlTGlzdApmdW5jIChsaXN0ICpUeXBlTGlzdCkgTWluKCkgVHlwZQpmdW5jIChsaXN0ICpUeXBlTGlzdCkgTWF4KCkgKHJlc3VsdCBUeXBlKQpmdW5jIChsaXN0ICpUeXBlTGlzdCkgU3VtKCkgVHlwZQpmdW5jIChsaXN0ICpUeXBlTGlzdCkgU3RyaW5nTGlzdCgpIFtdc3RyaW5nCmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBTdHJpbmcoKSBzdHJpbmcKZnVuYyAobGlzdCAqVHlwZUxpc3QpIE1rU3RyaW5nKHNlcCBzdHJpbmcpIHN0cmluZwpmdW5jIChsaXN0ICpUeXBlTGlzdCkgTWtTdHJpbmczKGJlZm9yZSwgYmV0d2VlbiwgYWZ0ZXIgc3RyaW5nKSBzdHJpbmcKZnVuYyAobGlzdCAqVHlwZUxpc3QpIFVubWFyc2hhbEpTT04oYiBbXWJ5dGUpIGVycm9yCmZ1bmMgKGxpc3QgVHlwZUxpc3QpIE1hcnNoYWxKU09OKCkgKFtdYnl0ZSwgZXJyb3IpCmZ1bmMgKGxpc3QgKlR5cGVMaXN0KSBHb2JEZWNvZGUoYiBbXWJ5dGUpIGVycm9yCmZ1bmMgKGxpc3QgVHlwZUxpc3QpIEdvYkVuY29kZSgpIChbXWJ5dGUsIGVycm9yKQo=\"")
		packr.PackJSONBytes("builtin", "threadsafe-pmap-api.txt", "\"ZnVuYyAodHMgS2V5VHlwZVR1cGxlcykgQXBwZW5kMShrICpLZXksIHYgKlR5cGUpIEtleVR5cGVUdXBsZXMKZnVuYyAodHMgS2V5VHlwZVR1cGxlcykgQXBwZW5kMihrMSAqS2V5LCB2MSAqVHlwZSwgazIgKktleSwgdjIgKlR5cGUpIEtleVR5cGVUdXBsZXMKZnVuYyAodHMgS2V5VHlwZVR1cGxlcykgQXBwZW5kMyhrMSAqS2V5LCB2MSAqVHlwZSwgazIgKktleSwgdjIgKlR5cGUsIGszICpLZXksIHYzICpUeXBlKSBLZXlUeXBlVHVwbGVzCmZ1bmMgS2V5VHlwZVppcChrZXlzIC4uLipLZXkpIEtleVR5cGVUdXBsZXMKZnVuYyAodHMgS2V5VHlwZVR1cGxlcykgVmFsdWVzKHZhbHVlcyAuLi4qVHlwZSkgS2V5VHlwZVR1cGxlcwpmdW5jIE5ld0tleVR5cGVNYXAxKGsgKktleSwgdiAqVHlwZSkgKktleVR5cGVNYXAKZnVuYyBOZXdLZXlUeXBlTWFwKGt2IC4uLktleVR5cGVUdXBsZSkgKktleVR5cGVNYXAKZnVuYyAobW0gKktleVR5cGVNYXApIEtleXMoKSBbXSpLZXkKZnVuYyAobW0gKktleVR5cGVNYXApIFZhbHVlcygpIFtdKlR5cGUKZnVuYyAobW0gKktleVR5cGVNYXApIFRvU2xpY2UoKSBbXUtleVR5cGVUdXBsZQpmdW5jIChtbSAqS2V5VHlwZU1hcCkgR2V0KGsgKktleSkgKCpUeXBlLCBib29sKQpmdW5jIChtbSAqS2V5VHlwZU1hcCkgUHV0KGsgKktleSwgdiAqVHlwZSkgYm9vbApmdW5jIChtbSAqS2V5VHlwZU1hcCkgQ29udGFpbnNLZXkoayAqS2V5KSBib29sCmZ1bmMgKG1tICpLZXlUeXBlTWFwKSBDb250YWluc0FsbEtleXMoa2sgLi4uKktleSkgYm9vbApmdW5jIChtbSAqS2V5VHlwZU1hcCkgQ2xlYXIoKQpmdW5jIChtbSAqS2V5VHlwZU1hcCkgUmVtb3ZlKGsgKktleSkKZnVuYyAobW0gKktleVR5cGVNYXApIFBvcChrICpLZXkpICgqVHlwZSwgYm9vbCkKZnVuYyAobW0gKktleVR5cGVNYXApIFNpemUoKSBpbnQKZnVuYyAobW0gKktleVR5cGVNYXApIElzRW1wdHkoKSBib29sCmZ1bmMgKG1tICpLZXlUeXBlTWFwKSBOb25FbXB0eSgpIGJvb2wKZnVuYyAobW0gKktleVR5cGVNYXApIERyb3BXaGVyZShmbiBmdW5jKCpLZXksICpUeXBlKSBib29sKSBLZXlUeXBlVHVwbGVzCmZ1bmMgKG1tICpLZXlUeXBlTWFwKSBGb3JlYWNoKGYgZnVuYygqS2V5LCAqVHlwZSkpCmZ1bmMgKG1tICpLZXlUeXBlTWFwKSBGb3JhbGwocCBmdW5jKCpLZXksICpUeXBlKSBib29sKSBib29sCmZ1bmMgKG1tICpLZXlUeXBlTWFwKSBFeGlzdHMocCBmdW5jKCpLZXksICpUeXBlKSBib29sKSBib29sCmZ1bmMgKG1tICpLZXlUeXBlTWFwKSBGaW5kKHAgZnVuYygqS2V5LCAqVHlwZSkgYm9vbCkgKEtleVR5cGVUdXBsZSwgYm9vbCkKZnVuYyAobW0gKktleVR5cGVNYXApIEZpbHRlcihwIGZ1bmMoKktleSwgKlR5cGUpIGJvb2wpICpLZXlUeXBlTWFwCmZ1bmMgKG1tICpLZXlUeXBlTWFwKSBQYXJ0aXRpb24ocCBmdW5jKCpLZXksICpUeXBlKSBib29sKSAobWF0Y2hpbmcgKktleVR5cGVNYXAsIG90aGVycyAqS2V5VHlwZU1hcCkKZnVuYyAobW0gKktleVR5cGVNYXApIE1hcChmIGZ1bmMoKktleSwgKlR5cGUpICgqS2V5LCAqVHlwZSkpICpLZXlUeXBlTWFwCmZ1bmMgKG1tICpLZXlUeXBlTWFwKSBGbGF0TWFwKGYgZnVuYygqS2V5LCAqVHlwZSkgW11LZXlUeXBlVHVwbGUpICpLZXlUeXBlTWFwCmZ1bmMgKG1tICpLZXlUeXBlTWFwKSBDbG9uZSgpICpLZXlUeXBlTWFwCmZ1bmMgKG1tICpLZXlUeXBlTWFwKSBTdHJpbmcoKSBzdHJpbmcKZnVuYyAobW0gKktleVR5cGVNYXApIE1rU3RyaW5nKHNlcCBzdHJpbmcpIHN0cmluZwpmdW5jIChtbSAqS2V5VHlwZU1hcCkgTWtTdHJpbmczKGJlZm9yZSwgYmV0d2VlbiwgYWZ0ZXIgc3RyaW5nKSBzdHJpbmcKZnVuYyAobW0gKktleVR5cGVNYXApIFVubWFyc2hhbEpTT04oYiBbXWJ5dGUpIGVycm9yCmZ1bmMgKG1tICpLZXlUeXBlTWFwKSBNYXJzaGFsSlNPTigpIChbXWJ5dGUsIGVycm9yKQpmdW5jIChtbSAqS2V5VHlwZU1hcCkgR29iRGVjb2RlKGIgW11ieXRlKSBlcnJvcgpmdW5jIChtbSAqS2V5VHlwZU1hcCkgR29iRW5jb2RlKCkgKFtdYnl0ZSwgZXJyb3IpCg==\"")
		packr.PackJSONBytes("builtin", "threadsafe-pqueue-api.txt", "\"ZnVuYyBOZXdUeXBlUXVldWUoY2FwYWNpdHkgaW50LCBvdmVyd3JpdGUgYm9vbCkgKlR5cGVRdWV1ZQpmdW5jIE5ld1R5cGVTb3J0ZWRRdWV1ZShjYXBhY2l0eSBpbnQsIG92ZXJ3cml0ZSBib29sLCBsZXNzIGZ1bmMoaSwgaiAqVHlwZSkgYm9vbCkgKlR5cGVRdWV1ZQpmdW5jIEJ1aWxkVHlwZVF1ZXVlRnJvbUNoYW4oc291cmNlIDwtY2hhbiAqVHlwZSkgKlR5cGVRdWV1ZQpmdW5jIChxdWV1ZSAqVHlwZVF1ZXVlKSBSZWFsbG9jYXRlKGNhcGFjaXR5IGludCwgb3ZlcndyaXRlIGJvb2wpICpUeXBlUXVldWUKZnVuYyAocXVldWUgKlR5cGVRdWV1ZSkgU3BhY2UoKSBpbnQKZnVuYyAocXVldWUgKlR5cGVRdWV1ZSkgQ2FwKCkgaW50CmZ1bmMgKHF1ZXVlICpUeXBlUXVldWUpIElzU2VxdWVuY2UoKSBib29sCmZ1bmMgKHF1ZXVlICpUeXBlUXVldWUpIElzU2V0KCkgYm9vbApmdW5jIChxdWV1ZSAqVHlwZVF1ZXVlKSBUb0xpc3QoKSAqVHlwZUxpc3QKZnVuYyAocXVldWUgKlR5cGVRdWV1ZSkgVG9TZXQoKSAqVHlwZVNldApmdW5jIChxdWV1ZSAqVHlwZVF1ZXVlKSBUb1NsaWNlKCkgW10qVHlwZQpmdW5jIChxdWV1ZSAqVHlwZVF1ZXVlKSBUb0ludGVyZmFjZVNsaWNlKCkgW11pbnRlcmZhY2V7fQpmdW5jIChxdWV1ZSAqVHlwZVF1ZXVlKSBDbG9uZSgpICpUeXBlUXVldWUKZnVuYyAocXVldWUgKlR5cGVRdWV1ZSkgR2V0KGkgaW50KSAqVHlwZQpmdW5jIChxdWV1ZSAqVHlwZVF1ZXVlKSBIZWFkKCkgKlR5cGUKZnVuYyAocXVldWUgKlR5cGVRdWV1ZSkgSGVhZE9wdGlvbigpICpUeXBlCmZ1bmMgKHF1ZXVlICpUeXBlUXVldWUpIExhc3QoKSAqVHlwZQpmdW5jIChxdWV1ZSAqVHlwZVF1ZXVlKSBMYXN0T3B0aW9uKCkgKlR5cGUKZnVuYyAocXVldWUgKlR5cGVRdWV1ZSkgSXNPdmVyd3JpdGluZygpIGJvb2wKZnVuYyAocXVldWUgKlR5cGVRdWV1ZSkgSXNGdWxsKCkgYm9vbApmdW5jIChxdWV1ZSAqVHlwZVF1ZXVlKSBJc0VtcHR5KCkgYm9vbApmdW5jIChxdWV1ZSAqVHlwZVF1ZXVlKSBOb25FbXB0eSgpIGJvb2wKZnVuYyAocXVldWUgKlR5cGVRdWV1ZSkgU2l6ZSgpIGludApmdW5jIChxdWV1ZSAqVHlwZVF1ZXVlKSBMZW4oKSBpbnQKZnVuYyAocXVldWUgKlR5cGVRdWV1ZSkgU3dhcChpLCBqIGludCkKZnVuYyAocXVldWUgKlR5cGVRdWV1ZSkgTGVzcyhpLCBqIGludCkgYm9vbApmdW5jIChxdWV1ZSAqVHlwZVF1ZXVlKSBTb3J0KCkKZnVuYyAocXVldWUgKlR5cGVRdWV1ZSkgU3RhYmxlU29ydCgpCmZ1bmMgKHF1ZXVlICpUeXBlUXVldWUpIENsZWFyKCkKZnVuYyAocXVldWUgKlR5cGVRdWV1ZSkgQWRkKG1vcmUgLi4uKlR5cGUpCmZ1bmMgKHF1ZXVlICpUeXBlUXVldWUpIFB1c2goaXRlbXMgLi4uKlR5cGUpICpUeXBlUXVldWUKZnVuYyAocXVldWUgKlR5cGVRdWV1ZSkgT2ZmZXIoaXRlbXMgLi4uKlR5cGUpIFtdKlR5cGUKZnVuYyAocXVldWUgKlR5cGVRdWV1ZSkgUG9wMSgpICgqVHlwZSwgYm9vbCkKZnVuYyAocXVldWUgKlR5cGVRdWV1ZSkgUG9wKG4gaW50KSBbXSpUeXBlCmZ1bmMgKHF1ZXVlICpUeXBlUXVldWUpIENvbnRhaW5zKHYgKlR5cGUpIGJvb2wKZnVuYyAocXVldWUgKlR5cGVRdWV1ZSkgQ29udGFpbnNBbGwoaSAuLi4qVHlwZSkgYm9vbApmdW5jIChxdWV1ZSAqVHlwZVF1ZXVlKSBFeGlzdHMocCBmdW5jKCpUeXBlKSBib29sKSBib29sCmZ1bmMgKHF1ZXVlICpUeXBlUXVldWUpIEZvcmFsbChwIGZ1bmMoKlR5cGUpIGJvb2wpIGJvb2wKZnVuYyAocXVldWUgKlR5cGVRdWV1ZSkgRm9yZWFjaChmIGZ1bmMoKlR5cGUpKQpmdW5jIChxdWV1ZSAqVHlwZVF1ZXVlKSBTZW5kKCkgPC1jaGFuICpUeXBlCmZ1bmMgKHF1ZXVlICpUeXBlUXVldWUpIERvS2VlcFdoZXJlKHAgZnVuYygqVHlwZSkgYm9vbCkgKlR5cGVRdWV1ZQpmdW5jIChxdWV1ZSAqVHlwZVF1ZXVlKSBGaW5kKHAgZnVuYygqVHlwZSkgYm9vbCkgKCpUeXBlLCBib29sKQpmdW5jIChxdWV1ZSAqVHlwZVF1ZXVlKSBGaWx0ZXIocCBmdW5jKCpUeXBlKSBib29sKSAqVHlwZVF1ZXVlCmZ1bmMgKHF1ZXVlICpUeXBlUXVldWUpIFBhcnRpdGlvbihwIGZ1bmMoKlR5cGUpIGJvb2wpICgqVHlwZVF1ZXVlLCAqVHlwZVF1ZXVlKQpmdW5jIChxdWV1ZSAqVHlwZVF1ZXVlKSBNYXAoZiBmdW5jKCpUeXBlKSAqVHlwZSkgKlR5cGVRdWV1ZQpmdW5jIChxdWV1ZSAqVHlwZVF1ZXVlKSBGbGF0TWFwKGYgZnVuYygqVHlwZSkgW10qVHlwZSkgKlR5cGVRdWV1ZQpmdW5jIChxdWV1ZSAqVHlwZVF1ZXVlKSBDb3VudEJ5KHAgZnVuYygqVHlwZSkgYm9vbCkgKHJlc3VsdCBpbnQpCmZ1bmMgKHF1ZXVlICpUeXBlUXVldWUpIE1pbkJ5KGxlc3MgZnVuYygqVHlwZSwgKlR5cGUpIGJvb2wpICpUeXBlCmZ1bmMgKHF1ZXVlICpUeXBlUXVldWUpIE1heEJ5KGxlc3MgZnVuYygqVHlwZSwgKlR5cGUpIGJvb2wpICpUeXBlCmZ1bmMgKHF1ZXVlICpUeXBlUXVldWUpIE1pbigpIFR5cGUKZnVuYyAocXVldWUgKlR5cGVRdWV1ZSkgTWF4KCkgKHJlc3VsdCBUeXBlKQpmdW5jIChxdWV1ZSAqVHlwZVF1ZXVlKSBTdW0oKSBUeXBlCmZ1bmMgKHF1ZXVlICpUeXBlUXVldWUpIFN0cmluZ0xpc3QoKSBbXXN0cmluZwpmdW5jIChxdWV1ZSAqVHlwZVF1ZXVlKSBTdHJpbmcoKSBzdHJpbmcKZnVuYyAocXVldWUgKlR5cGVRdWV1ZSkgTWtTdHJpbmcoc2VwIHN0cmluZykgc3RyaW5nCmZ1bmMgKHF1ZXVlICpUeXBlUXVldWUpIE1rU3RyaW5nMyhiZWZvcmUsIGJldHdlZW4sIGFmdGVyIHN0cmluZykgc3RyaW5nCmZ1bmMgKHF1ZXVlICpUeXBlUXVldWUpIFVubWFyc2hhbEpTT04oYiBbXWJ5dGUpIGVycm9yCmZ1bmMgKHF1ZXVlIFR5cGVRdWV1ZSkgTWFyc2hhbEpTT04oKSAoW11ieXRlLCBlcnJvcikK\"")
		packr.PackJSONBytes("builtin", "threadsafe-pset-api.txt", "\"ZnVuYyBOZXdUeXBlU2V0KHZhbHVlcyAuLi4qVHlwZSkgKlR5cGVTZXQKZnVuYyBDb252ZXJ0VHlwZVNldCh2YWx1ZXMgLi4uaW50ZXJmYWNle30pICgqVHlwZVNldCwgYm9vbCkKZnVuYyBCdWlsZFR5cGVTZXRGcm9tQ2hhbihzb3VyY2UgPC1jaGFuICpUeXBlKSAqVHlwZVNldApmdW5jIChzZXQgKlR5cGVTZXQpIElzU2VxdWVuY2UoKSBib29sCmZ1bmMgKHNldCAqVHlwZVNldCkgSXNTZXQoKSBib29sCmZ1bmMgKHNldCAqVHlwZVNldCkgVG9MaXN0KCkgKlR5cGVMaXN0CmZ1bmMgKHNldCAqVHlwZVNldCkgVG9TZXQoKSAqVHlwZVNldApmdW5jIChzZXQgKlR5cGVTZXQpIFRvU2xpY2UoKSBbXSpUeXBlCmZ1bmMgKHNldCAqVHlwZVNldCkgVG9JbnRlcmZhY2VTbGljZSgpIFtdaW50ZXJmYWNle30KZnVuYyAoc2V0ICpUeXBlU2V0KSBDbG9uZSgpICpUeXBlU2V0CmZ1bmMgKHNldCAqVHlwZVNldCkgSXNFbXB0eSgpIGJvb2wKZnVuYyAoc2V0ICpUeXBlU2V0KSBOb25FbXB0eSgpIGJvb2wKZnVuYyAoc2V0ICpUeXBlU2V0KSBTaXplKCkgaW50CmZ1bmMgKHNldCAqVHlwZVNldCkgQ2FyZGluYWxpdHkoKSBpbnQKZnVuYyAoc2V0ICpUeXBlU2V0KSBBZGQobW9yZSAuLi4qVHlwZSkKZnVuYyAoc2V0ICpUeXBlU2V0KSBDb250YWlucyhpICpUeXBlKSBib29sCmZ1bmMgKHNldCAqVHlwZVNldCkgQ29udGFpbnNBbGwoaSAuLi4qVHlwZSkgYm9vbApmdW5jIChzZXQgKlR5cGVTZXQpIFVuaW9uKG90aGVyICpUeXBlU2V0KSAqVHlwZVNldApmdW5jIChzZXQgKlR5cGVTZXQpIEludGVyc2VjdChvdGhlciAqVHlwZVNldCkgKlR5cGVTZXQKZnVuYyAoc2V0ICpUeXBlU2V0KSBEaWZmZXJlbmNlKG90aGVyICpUeXBlU2V0KSAqVHlwZVNldApmdW5jIChzZXQgKlR5cGVTZXQpIFN5bW1ldHJpY0RpZmZlcmVuY2Uob3RoZXIgKlR5cGVTZXQpICpUeXBlU2V0CmZ1bmMgKHNldCAqVHlwZVNldCkgQ2xlYXIoKQpmdW5jIChzZXQgKlR5cGVTZXQpIFJlbW92ZShpICpUeXBlKQpmdW5jIChzZXQgKlR5cGVTZXQpIFNlbmQoKSA8LWNoYW4gKlR5cGUKZnVuYyAoc2V0ICpUeXBlU2V0KSBGb3JhbGwocCBmdW5jKCpUeXBlKSBib29sKSBib29sCmZ1bmMgKHNldCAqVHlwZVNldCkgRXhpc3RzKHAgZnVuYygqVHlwZSkgYm9vbCkgYm9vbApmdW5jIChzZXQgKlR5cGVTZXQpIEZvcmVhY2goZiBmdW5jKCpUeXBlKSkKZnVuYyAoc2V0ICpUeXBlU2V0KSBGaW5kKHAgZnVuYygqVHlwZSkgYm9vbCkgKCpUeXBlLCBib29sKQpmdW5jIChzZXQgKlR5cGVTZXQpIEZpbHRlcihwIGZ1bmMoKlR5cGUpIGJvb2wpICpUeXBlU2V0CmZ1bmMgKHNldCAqVHlwZVNldCkgUGFydGl0aW9uKHAgZnVuYygqVHlwZSkgYm9vbCkgKCpUeXBlU2V0LCAqVHlwZVNldCkKZnVuYyAoc2V0ICpUeXBlU2V0KSBNYXAoZiBmdW5jKCpUeXBlKSAqVHlwZSkgKlR5cGVTZXQKZnVuYyAoc2V0ICpUeXBlU2V0KSBGbGF0TWFwKGYgZnVuYygqVHlwZSkgW10qVHlwZSkgKlR5cGVTZXQKZnVuYyAoc2V0ICpUeXBlU2V0KSBDb3VudEJ5KHAgZnVuYygqVHlwZSkgYm9vbCkgKHJlc3VsdCBpbnQpCmZ1bmMgKHNldCAqVHlwZVNldCkgTWluKCkgVHlwZQpmdW5jIChzZXQgKlR5cGVTZXQpIE1heCgpIChyZXN1bHQgVHlwZSkKZnVuYyAoc2V0ICpUeXBlU2V0KSBNaW5CeShsZXNzIGZ1bmMoKlR5cGUsICpUeXBlKSBib29sKSAqVHlwZQpmdW5jIChzZXQgKlR5cGVTZXQpIE1heEJ5KGxlc3MgZnVuYygqVHlwZSwgKlR5cGUpIGJvb2wpICpUeXBlCmZ1bmMgKHNldCAqVHlwZVNldCkgU3VtKCkgVHlwZQpmdW5jIChzZXQgKlR5cGVTZXQpIFN0cmluZ0xpc3QoKSBbXXN0cmluZwpmdW5jIChzZXQgKlR5cGVTZXQpIFN0cmluZygpIHN0cmluZwpmdW5jIChzZXQgKlR5cGVTZXQpIE1rU3RyaW5nKHNlcCBzdHJpbmcpIHN0cmluZwpmdW5jIChzZXQgKlR5cGVTZXQpIE1rU3RyaW5nMyhiZWZvcmUsIGJldHdlZW4sIGFmdGVyIHN0cmluZykgc3RyaW5nCmZ1bmMgKHNldCAqVHlwZVNldCkgVW5tYXJzaGFsSlNPTihiIFtdYnl0ZSkgZXJyb3IKZnVuYyAoc2V0ICpUeXBlU2V0KSBNYXJzaGFsSlNPTigpIChbXWJ5dGUsIGVycm9yKQpmdW5jIChzZXQgKlR5cGVTZXQpIFN0cmluZ01hcCgpIG1hcFtzdHJpbmddYm9vbApmdW5jIChzZXQgKlR5cGVTZXQpIEdvYkRlY29kZShiIFtdYnl0ZSkgZXJyb3IKZnVuYyAoc2V0IFR5cGVTZXQpIEdvYkVuY29kZSgpIChbXWJ5dGUsIGVycm9yKQo=\"")
		packr.PackJSONBytes("builtin", "threadsafe-queue-api.txt", "\"ZnVuYyBOZXdUeXBlUXVldWUoY2FwYWNpdHkgaW50LCBvdmVyd3JpdGUgYm9vbCkgKlR5cGVRdWV1ZQpmdW5jIE5ld1R5cGVTb3J0ZWRRdWV1ZShjYXBhY2l0eSBpbnQsIG92ZXJ3cml0ZSBib29sLCBsZXNzIGZ1bmMoaSwgaiBUeXBlKSBib29sKSAqVHlwZVF1ZXVlCmZ1bmMgQnVpbGRUeXBlUXVldWVGcm9tQ2hhbihzb3VyY2UgPC1jaGFuIFR5cGUpICpUeXBlUXVldWUKZnVuYyAocXVldWUgKlR5cGVRdWV1ZSkgUmVhbGxvY2F0ZShjYXBhY2l0eSBpbnQsIG92ZXJ3cml0ZSBib29sKSAqVHlwZVF1ZXVlCmZ1bmMgKHF1ZXVlICpUeXBlUXVldWUpIFNwYWNlKCkgaW50CmZ1bmMgKHF1ZXVlICpUeXBlUXVldWUpIENhcCgpIGludApmdW5jIChxdWV1ZSAqVHlwZVF1ZXVlKSBJc1NlcXVlbmNlKCkgYm9vbApmdW5jIChxdWV1ZSAqVHlwZVF1ZXVlKSBJc1NldCgpIGJvb2wKZnVuYyAocXVldWUgKlR5cGVRdWV1ZSkgVG9MaXN0KCkgKlR5cGVMaXN0CmZ1bmMgKHF1ZXVlICpUeXBlUXVldWUpIFRvU2V0KCkgKlR5cGVTZXQKZnVuYyAocXVldWUgKlR5cGVRdWV1ZSkgVG9TbGljZSgpIFtdVHlwZQpmdW5jIChxdWV1ZSAqVHlwZVF1ZXVlKSBUb0ludGVyZmFjZVNsaWNlKCkgW11pbnRlcmZhY2V7fQpmdW5jIChxdWV1ZSAqVHlwZVF1ZXVlKSBDbG9uZSgpICpUeXBlUXVldWUKZnVuYyAocXVldWUgKlR5cGVRdWV1ZSkgR2V0KGkgaW50KSBUeXBlCmZ1bmMgKHF1ZXVlICpUeXBlUXVldWUpIEhlYWQoKSBUeXBlCmZ1bmMgKHF1ZXVlICpUeXBlUXVldWUpIEhlYWRPcHRpb24oKSBUeXBlCmZ1bmMgKHF1ZXVlICpUeXBlUXVldWUpIExhc3QoKSBUeXBlCmZ1bmMgKHF1ZXVlICpUeXBlUXVldWUpIExhc3RPcHRpb24oKSBUeXBlCmZ1bmMgKHF1ZXVlICpUeXBlUXVldWUpIElzT3ZlcndyaXRpbmcoKSBib29sCmZ1bmMgKHF1ZXVlICpUeXBlUXVldWUpIElzRnVsbCgpIGJvb2wKZnVuYyAocXVldWUgKlR5cGVRdWV1ZSkgSXNFbXB0eSgpIGJvb2wKZnVuYyAocXVldWUgKlR5cGVRdWV1ZSkgTm9uRW1wdHkoKSBib29sCmZ1bmMgKHF1ZXVlICpUeXBlUXVldWUpIFNpemUoKSBpbnQKZnVuYyAocXVldWUgKlR5cGVRdWV1ZSkgTGVuKCkgaW50CmZ1bmMgKHF1ZXVlICpUeXBlUXVldWUpIFN3YXAoaSwgaiBpbnQpCmZ1bmMgKHF1ZXVlICpUeXBlUXVldWUpIExlc3MoaSwgaiBpbnQpIGJvb2wKZnVuYyAocXVldWUgKlR5cGVRdWV1ZSkgU29ydCgpCmZ1bmMgKHF1ZXVlICpUeXBlUXVldWUpIFN0YWJsZVNvcnQoKQpmdW5jIChxdWV1ZSAqVHlwZVF1ZXVlKSBDbGVhcigpCmZ1bmMgKHF1ZXVlICpUeXBlUXVldWUpIEFkZChtb3JlIC4uLlR5cGUpCmZ1bmMgKHF1ZXVlICpUeXBlUXVldWUpIFB1c2goaXRlbXMgLi4uVHlwZSkgKlR5cGVRdWV1ZQpmdW5jIChxdWV1ZSAqVHlwZVF1ZXVlKSBPZmZlcihpdGVtcyAuLi5UeXBlKSBbXVR5cGUKZnVuYyAocXVldWUgKlR5cGVRdWV1ZSkgUG9wMSgpIChUeXBlLCBib29sKQpmdW5jIChxdWV1ZSAqVHlwZVF1ZXVlKSBQb3AobiBpbnQpIFtdVHlwZQpmdW5jIChxdWV1ZSAqVHlwZVF1ZXVlKSBDb250YWlucyh2IFR5cGUpIGJvb2wKZnVuYyAocXVldWUgKlR5cGVRdWV1ZSkgQ29udGFpbnNBbGwoaSAuLi5UeXBlKSBib29sCmZ1bmMgKHF1ZXVlICpUeXBlUXVldWUpIEV4aXN0cyhwIGZ1bmMoVHlwZSkgYm9vbCkgYm9vbApmdW5jIChxdWV1ZSAqVHlwZVF1ZXVlKSBGb3JhbGwocCBmdW5jKFR5cGUpIGJvb2wpIGJvb2wKZnVuYyAocXVldWUgKlR5cGVRdWV1ZSkgRm9yZWFjaChmIGZ1bmMoVHlwZSkpCmZ1bmMgKHF1ZXVlICpUeXBlUXVldWUpIFNlbmQoKSA8LWNoYW4gVHlwZQpmdW5jIChxdWV1ZSAqVHlwZVF1ZXVlKSBEb0tlZXBXaGVyZShwIGZ1bmMoVHlwZSkgYm9vbCkgKlR5cGVRdWV1ZQpmdW5jIChxdWV1ZSAqVHlwZVF1ZXVlKSBGaW5kKHAgZnVuYyhUeXBlKSBib29sKSAoVHlwZSwgYm9vbCkKZnVuYyAocXVldWUgKlR5cGVRdWV1ZSkgRmlsdGVyKHAgZnVuYyhUeXBlKSBib29sKSAqVHlwZVF1ZXVlCmZ1bmMgKHF1ZXVlICpUeXBlUXVldWUpIFBhcnRpdGlvbihwIGZ1bmMoVHlwZSkgYm9vbCkgKCpUeXBlUXVldWUsICpUeXBlUXVldWUpCmZ1bmMgKHF1ZXVlICpUeXBlUXVldWUpIE1hcChmIGZ1bmMoVHlwZSkgVHlwZSkgKlR5cGVRdWV1ZQpmdW5jIChxdWV1ZSAqVHlwZVF1ZXVlKSBGbGF0TWFwKGYgZnVuYyhUeXBlKSBbXVR5cGUpICpUeXBlUXVldWUKZnVuYyAocXVldWUgKlR5cGVRdWV1ZSkgQ291bnRCeShwIGZ1bmMoVHlwZSkgYm9vbCkgKHJlc3VsdCBpbnQpCmZ1bmMgKHF1ZXVlICpUeXBlUXVldWUpIE1pbkJ5KGxlc3MgZnVuYyhUeXBlLCBUeXBlKSBib29sKSBUeXBlCmZ1bmMgKHF1ZXVlICpUeXBlUXVldWUpIE1heEJ5KGxlc3MgZnVuYyhUeXBlLCBUeXBlKSBib29sKSBUeXBlCmZ1bmMgKHF1ZXVlICpUeXBlUXVldWUpIE1pbigpIFR5cGUKZnVuYyAocXVldWUgKlR5cGVRdWV1ZSkgTWF4KCkgKHJlc3VsdCBUeXBlKQpmdW5jIChxdWV1ZSAqVHlwZVF1ZXVlKSBTdW0oKSBUeXBlCmZ1bmMgKHF1ZXVlICpUeXBlUXVldWUpIFN0cmluZ0xpc3QoKSBbXXN0cmluZwpmdW5jIChxdWV1ZSAqVHlwZVF1ZXVlKSBTdHJpbmcoKSBzdHJpbmcKZnVuYyAocXVldWUgKlR5cGVRdWV1ZSkgTWtTdHJpbmcoc2VwIHN0cmluZykgc3RyaW5nCmZ1bmMgKHF1ZXVlICpUeXBlUXVldWUpIE1rU3RyaW5nMyhiZWZvcmUsIGJldHdlZW4sIGFmdGVyIHN0cmluZykgc3RyaW5nCmZ1bmMgKHF1ZXVlICpUeXBlUXVldWUpIFVubWFyc2hhbEpTT04oYiBbXWJ5dGUpIGVycm9yCmZ1bmMgKHF1ZXVlIFR5cGVRdWV1ZSkgTWFyc2hhbEpTT04oKSAoW11ieXRlLCBlcnJvcikK\"")
		packr.PackJSONBytes("builtin", "threadsafe-set-api.txt", "\"ZnVuYyBOZXdUeXBlU2V0KHZhbHVlcyAuLi5UeXBlKSAqVHlwZVNldApmdW5jIENvbnZlcnRUeXBlU2V0KHZhbHVlcyAuLi5pbnRlcmZhY2V7fSkgKCpUeXBlU2V0LCBib29sKQpmdW5jIEJ1aWxkVHlwZVNldEZyb21DaGFuKHNvdXJjZSA8LWNoYW4gVHlwZSkgKlR5cGVTZXQKZnVuYyAoc2V0ICpUeXBlU2V0KSBJc1NlcXVlbmNlKCkgYm9vbApmdW5jIChzZXQgKlR5cGVTZXQpIElzU2V0KCkgYm9vbApmdW5jIChzZXQgKlR5cGVTZXQpIFRvTGlzdCgpICpUeXBlTGlzdApmdW5jIChzZXQgKlR5cGVTZXQpIFRvU2V0KCkgKlR5cGVTZXQKZnVuYyAoc2V0ICpUeXBlU2V0KSBUb1NsaWNlKCkgW11UeXBlCmZ1bmMgKHNldCAqVHlwZVNldCkgVG9JbnRlcmZhY2VTbGljZSgpIFtdaW50ZXJmYWNle30KZnVuYyAoc2V0ICpUeXBlU2V0KSBDbG9uZSgpICpUeXBlU2V0CmZ1bmMgKHNldCAqVHlwZVNldCkgSXNFbXB0eSgpIGJvb2wKZnVuYyAoc2V0ICpUeXBlU2V0KSBOb25FbXB0eSgpIGJvb2wKZnVuYyAoc2V0ICpUeXBlU2V0KSBTaXplKCkgaW50CmZ1bmMgKHNldCAqVHlwZVNldCkgQ2FyZGluYWxpdHkoKSBpbnQKZnVuYyAoc2V0ICpUeXBlU2V0KSBBZGQobW9yZSAuLi5UeXBlKQpmdW5jIChzZXQgKlR5cGVTZXQpIENvbnRhaW5zKGkgVHlwZSkgYm9vbApmdW5jIChzZXQgKlR5cGVTZXQpIENvbnRhaW5zQWxsKGkgLi4uVHlwZSkgYm9vbApmdW5jIChzZXQgKlR5cGVTZXQpIFVuaW9uKG90aGVyICpUeXBlU2V0KSAqVHlwZVNldApmdW5jIChzZXQgKlR5cGVTZXQpIEludGVyc2VjdChvdGhlciAqVHlwZVNldCkgKlR5cGVTZXQKZnVuYyAoc2V0ICpUeXBlU2V0KSBEaWZmZXJlbmNlKG90aGVyICpUeXBlU2V0KSAqVHlwZVNldApmdW5jIChzZXQgKlR5cGVTZXQpIFN5bW1ldHJpY0RpZmZlcmVuY2Uob3RoZXIgKlR5cGVTZXQpICpUeXBlU2V0CmZ1bmMgKHNldCAqVHlwZVNldCkgQ2xlYXIoKQpmdW5jIChzZXQgKlR5cGVTZXQpIFJlbW92ZShpIFR5cGUpCmZ1bmMgKHNldCAqVHlwZVNldCkgU2VuZCgpIDwtY2hhbiBUeXBlCmZ1bmMgKHNldCAqVHlwZVNldCkgRm9yYWxsKHAgZnVuYyhUeXBlKSBib29sKSBib29sCmZ1bmMgKHNldCAqVHlwZVNldCkgRXhpc3RzKHAgZnVuYyhUeXBlKSBib29sKSBib29sCmZ1bmMgKHNldCAqVHlwZVNldCkgRm9yZWFjaChmIGZ1bmMoVHlwZSkpCmZ1bmMgKHNldCAqVHlwZVNldCkgRmluZChwIGZ1bmMoVHlwZSkgYm9vbCkgKFR5cGUsIGJvb2wpCmZ1bmMgKHNldCAqVHlwZVNldCkgRmlsdGVyKHAgZnVuYyhUeXBlKSBib29sKSAqVHlwZVNldApmdW5jIChzZXQgKlR5cGVTZXQpIFBhcnRpdGlvbihwIGZ1bmMoVHlwZSkgYm9vbCkgKCpUeXBlU2V0LCAqVHlwZVNldCkKZnVuYyAoc2V0ICpUeXBlU2V0KSBNYXAoZiBmdW5jKFR5cGUpIFR5cGUpICpUeXBlU2V0CmZ1bmMgKHNldCAqVHlwZVNldCkgRmxhdE1hcChmIGZ1bmMoVHlwZSkgW11UeXBlKSAqVHlwZVNldApmdW5jIChzZXQgKlR5cGVTZXQpIENvdW50QnkocCBmdW5jKFR5cGUpIGJvb2wpIChyZXN1bHQgaW50KQpmdW5jIChzZXQgKlR5cGVTZXQpIE1pbigpIFR5cGUKZnVuYyAoc2V0ICpUeXBlU2V0KSBNYXgoKSAocmVzdWx0IFR5cGUpCmZ1bmMgKHNldCAqVHlwZVNldCkgTWluQnkobGVzcyBmdW5jKFR5cGUsIFR5cGUpIGJvb2wpIFR5cGUKZnVuYyAoc2V0ICpUeXBlU2V0KSBNYXhCeShsZXNzIGZ1bmMoVHlwZSwgVHlwZSkgYm9vbCkgVHlwZQpmdW5jIChzZXQgKlR5cGVTZXQpIFN1bSgpIFR5cGUKZnVuYyAoc2V0ICpUeXBlU2V0KSBTdHJpbmdMaXN0KCkgW11zdHJpbmcKZnVuYyAoc2V0ICpUeXBlU2V0KSBTdHJpbmcoKSBzdHJpbmcKZnVuYyAoc2V0ICpUeXBlU2V0KSBNa1N0cmluZyhzZXAgc3RyaW5nKSBzdHJpbmcKZnVuYyAoc2V0ICpUeXBlU2V0KSBNa1N0cmluZzMoYmVmb3JlLCBiZXR3ZWVuLCBhZnRlciBzdHJpbmcpIHN0cmluZwpmdW5jIChzZXQgKlR5cGVTZXQpIFVubWFyc2hhbEpTT04oYiBbXWJ5dGUpIGVycm9yCmZ1bmMgKHNldCAqVHlwZVNldCkgTWFyc2hhbEpTT04oKSAoW11ieXRlLCBlcnJvcikKZnVuYyAoc2V0ICpUeXBlU2V0KSBTdHJpbmdNYXAoKSBtYXBbc3RyaW5nXWJvb2wKZnVuYyAoc2V0ICpUeXBlU2V0KSBHb2JEZWNvZGUoYiBbXWJ5dGUpIGVycm9yCmZ1bmMgKHNldCBUeXBlU2V0KSBHb2JFbmNvZGUoKSAoW11ieXRlLCBlcnJvcikK\"")
		packr.PackJSONBytes("builtin", "types/stringy.tpl", "\"Ly8gQSBkZXJpdmVkIHN0cmluZy1iYXNlZCB0eXBlIGNvbXBhdGlibGUgd2l0aCBtYXJzaGFsbGluZyBhbmQgZGF0YWJhc2UgQVBJcy4KLy8KLy8gR2VuZXJhdGVkIGZyb20ge3suVGVtcGxhdGVGaWxlfX0gd2l0aCBUeXBlPXt7LlR5cGUuTmFtZX19Ci8vIG9wdGlvbnM6IFNvcnRhYmxlU2xpY2U6e3suU29ydGFibGVTbGljZX19Ci8vIGJ5IHJ1bnRlbXBsYXRlIHt7LkFwcFZlcnNpb259fQovLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2pvaGFuYnJhbmRob3JzdC9ydW50ZW1wbGF0ZS9ibG9iL21hc3Rlci9CVUlMVElOLm1kCgpwYWNrYWdlIHt7LlBhY2thZ2V9fQoKaW1wb3J0ICgKCSJlcnJvcnMiCnt7LSBpZiAuU29ydGFibGVTbGljZX19Cgkic29ydCIKe3stIGVuZH19Cgkic3RyaW5ncyIKCSJkYXRhYmFzZS9zcWwvZHJpdmVyIgoJImZtdCIKKQoKLy8ge3suVHlwZS5OYW1lfX0gaXMgYSBzcGVjaWFsaXNlZCBraW5kIG9mIHN0cmluZy4KdHlwZSB7ey5UeXBlLk5hbWV9fSBzdHJpbmcKCi8vIFB0ciByZXR1cm5zIHRoZSBhZGRyZXNzIG9mIGEge3suVHlwZS5OYW1lfX0uCmZ1bmMgKHt7LlR5cGUuTH19IHt7LlR5cGUuTmFtZX19KSBQdHIoKSAqe3suVHlwZS5OYW1lfX0gewoJcmV0dXJuICZ7ey5UeXBlLkx9fQp9CgovLyBTdHJpbmcgY29udmVydHMgdG8gYSBzdHJpbmcgYW5kIGltcGxlbWVudHMgZm10LlN0cmluZ2VyLgpmdW5jICh7ey5UeXBlLkx9fSB7ey5UeXBlLk5hbWV9fSkgU3RyaW5nKCkgc3RyaW5nIHsKCXJldHVybiBzdHJpbmcoe3suVHlwZS5MfX0pCn0KCi8vIFRyaW1TcGFjZSByZW1vdmVzIHN1cnJvdW5kaW5nIHdoaXRlc3BhY2UuCmZ1bmMgKHt7LlR5cGUuTH19IHt7LlR5cGUuTmFtZX19KSBUcmltU3BhY2UoKSB7ey5UeXBlLk5hbWV9fSB7CglyZXR1cm4ge3suVHlwZS5OYW1lfX0oc3RyaW5ncy5UcmltU3BhY2Uoe3suVHlwZS5MfX0uU3RyaW5nKCkpKQp9CgovLyBUb0xvd2VyIGNvbnZlcnRzIHRoZSB2YWx1ZSB0byBsb3dlcmNhc2UuCmZ1bmMgKHt7LlR5cGUuTH19IHt7LlR5cGUuTmFtZX19KSBUb0xvd2VyKCkge3suVHlwZS5OYW1lfX0gewoJcmV0dXJuIHt7LlR5cGUuTmFtZX19KHN0cmluZ3MuVG9Mb3dlcihzdHJpbmcoe3suVHlwZS5MfX0pKSkKfQoKLy8gVG9VcHBlciBjb252ZXJ0cyB0aGUgdmFsdWUgdG8gdXBwZXJjYXNlLgpmdW5jICh7ey5UeXBlLkx9fSB7ey5UeXBlLk5hbWV9fSkgVG9VcHBlcigpIHt7LlR5cGUuTmFtZX19IHsKCXJldHVybiB7ey5UeXBlLk5hbWV9fShzdHJpbmdzLlRvVXBwZXIoc3RyaW5nKHt7LlR5cGUuTH19KSkpCn0KCi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKLy8gU2NhbiBwYXJzZXMgc29tZSB2YWx1ZS4gSXQgaW1wbGVtZW50cyBzcWwuU2Nhbm5lciwKLy8gaHR0cHM6Ly9nb2xhbmcub3JnL3BrZy9kYXRhYmFzZS9zcWwvI1NjYW5uZXIKZnVuYyAoe3suVHlwZS5MfX0gKnt7LlR5cGUuTmFtZX19KSBTY2FuKHZhbHVlIGludGVyZmFjZXt9KSBlcnJvciB7CglpZiB2YWx1ZSA9PSBuaWwgewoJCSp7ey5UeXBlLkx9fSA9IHt7LlR5cGUuTmFtZX19KCIiKQoJCXJldHVybiBuaWwKCX0KCglzd2l0Y2ggdmFsdWUuKHR5cGUpIHsKCWNhc2Ugc3RyaW5nOgoJCSp7ey5UeXBlLkx9fSA9IHt7LlR5cGUuTmFtZX19KHZhbHVlLihzdHJpbmcpKQoJY2FzZSBbXWJ5dGU6CgkJKnt7LlR5cGUuTH19ID0ge3suVHlwZS5OYW1lfX0oc3RyaW5nKHZhbHVlLihbXWJ5dGUpKSkKCWNhc2UgbmlsOgoJZGVmYXVsdDoKCQlyZXR1cm4gZXJyb3JzLk5ldyhmbXQuU3ByaW50Zigie3suVHlwZS5OYW1lfX0uU2NhbiglI3YpIiwgdmFsdWUpKQoJfQoJcmV0dXJuIG5pbAp9CgovLyBWYWx1ZSBjb252ZXJ0cyB0aGUgdmFsdWUgdG8gYSBzdHJpbmcuIEl0IGltcGxlbWVudHMgZHJpdmVyLlZhbHVlciwKLy8gaHR0cHM6Ly9nb2xhbmcub3JnL3BrZy9kYXRhYmFzZS9zcWwvZHJpdmVyLyNWYWx1ZXIKZnVuYyAoe3suVHlwZS5MfX0ge3suVHlwZS5OYW1lfX0pIFZhbHVlKCkgKGRyaXZlci5WYWx1ZSwgZXJyb3IpIHsKCXJldHVybiBzdHJpbmcoe3suVHlwZS5MfX0pLCBuaWwKfQoKLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgovLyBNYXJzaGFsVGV4dCBjb252ZXJ0cyB2YWx1ZXMgdG8gYSBmb3JtIHN1aXRhYmxlIGZvciB0cmFuc21pc3Npb24gdmlhIEpTT04sIFhNTCBldGMuCi8vIGh0dHBzOi8vZ29sYW5nLm9yZy9wa2cvZW5jb2RpbmcvI1RleHRNYXJzaGFsZXIKZnVuYyAoe3suVHlwZS5MfX0ge3suVHlwZS5OYW1lfX0pIE1hcnNoYWxUZXh0KCkgKHRleHQgW11ieXRlLCBlcnIgZXJyb3IpIHsKCXJldHVybiBbXWJ5dGUoe3suVHlwZS5MfX0uU3RyaW5nKCkpLCBuaWwKfQoKLy8gVW5tYXJzaGFsVGV4dCBjb252ZXJ0cyB0cmFuc21pdHRlZCB2YWx1ZXMgdG8gb3JkaW5hcnkgdmFsdWVzLgovLyBodHRwczovL2dvbGFuZy5vcmcvcGtnL2VuY29kaW5nLyNUZXh0VW5tYXJzaGFsZXIKZnVuYyAoe3suVHlwZS5MfX0gKnt7LlR5cGUuTmFtZX19KSBVbm1hcnNoYWxUZXh0KHRleHQgW11ieXRlKSBlcnJvciB7CglyZXR1cm4ge3suVHlwZS5MfX0uU2Nhbih0ZXh0KQp9CgovLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0Ke3tpZiAuU29ydGFibGVTbGljZX19Ci8vIHt7LlR5cGUuVX19U2xpY2UgYXR0YWNoZXMgdGhlIG1ldGhvZHMgb2Ygc29ydC5JbnRlcmZhY2UgdG8gW117ey5UeXBlLk5hbWV9fSwgc29ydGluZyBpbiBpbmNyZWFzaW5nIG9yZGVyLgp0eXBlIHt7LlR5cGUuVX19U2xpY2UgW117ey5UeXBlLk5hbWV9fQoKZnVuYyAocCB7ey5UeXBlLlV9fVNsaWNlKSBMZW4oKSBpbnQgICAgICAgICAgIHsgcmV0dXJuIGxlbihwKSB9CmZ1bmMgKHAge3suVHlwZS5VfX1TbGljZSkgTGVzcyhpLCBqIGludCkgYm9vbCB7IHJldHVybiBwW2ldIDwgcFtqXSB9CmZ1bmMgKHAge3suVHlwZS5VfX1TbGljZSkgU3dhcChpLCBqIGludCkgICAgICB7IHBbaV0sIHBbal0gPSBwW2pdLCBwW2ldIH0KCi8vIFNvcnRlZE4gaXMgYSBjb252ZW5pZW5jZSBtZXRob2QuCmZ1bmMgKHAge3suVHlwZS5VfX1TbGljZSkgU29ydGVkKCkgeyBzb3J0LlNvcnQocCkgfQp7e2VuZH19Cg==\"")
}
